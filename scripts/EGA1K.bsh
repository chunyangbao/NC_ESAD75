#!/bin/bash

mkdir -p /cga/bass/Chunyang/task/Matthew/EGA1K/


# metadata
EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K

## EGA datasets
use .anaconda3-5.3.1
source activate pyega3
### list all of the files
mkdir -p ${EGA1K}/metadata
pyega3 -cf ${EGA1K}/metadata/credential.EGA.json files EGAD00001006033 2> ${EGA1K}/metadata/EGA1K.files.tsv
### get metadata
cat ${EGA1K}/metadata/41591_2020_1033_MOESM3_ESM.txt | \
 awk -F "\t" -v OFS="\t" '!a[$1$2$3$4]++{print $1,$2,$3,$4}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{$4="sample_id";\
  print $0,"participant_id"}\
  FNR>1{print $0,"Pt-"$1}' > ${EGA1K}/metadata/EGA1K.samples.tsv


# BAM files
EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K

## qsub scripts for downloading
mkdir -p ${EGA1K}/EGAF
### prepare qsub scripts 
mkdir -p ${EGA1K}/EGAF/pyega3_bam
mkdir -p ${EGA1K}/EGAF/pyega3_log

time=$(date +"%m-%d-%Y"_%H-%M)
cat ${EGA1K}/metadata/EGA1K.files.tsv | \
 grep EGAF | sed 's#.*\] ##g' > ${EGA1K}/EGAF/pyega3_log/EGA1K.files.${time}.tsv
 
> ${EGA1K}/EGAF/EGA1K.pyega3.${time}.sh
cat ${EGA1K}/EGAF/pyega3_log/EGA1K.files.${time}.tsv | \
 while read l;do
    c=(${l});f=${c[0]};b=${c[4]}
    pyega3_basic="pyega3 -c 8 -cf ${EGA1K}/metadata/credential.EGA.json"
    pyega3_fetch="fetch ${f}"
    pyega3_save="--saveto ${EGA1K}/EGAF/pyega3_bam/${b}"
    pyega3_log="&> ${EGA1K}/EGAF/pyega3_log/${b/\.bam/.stderr.log}"
    echo "${pyega3_basic} ${pyega3_fetch} ${pyega3_save} ${pyega3_log}" >> ${EGA1K}/EGAF/EGA1K.pyega3.${time}.sh
done
### run qsub scripts
use UGER 
cat ${EGA1K}/EGAF/EGA1K.pyega3.${time}.sh | \
 while read l;do
    N=${l/*fetch /};N=${N/ */}
    qsub -b y -V -cwd -l h_rt=12:00:00 \
     -l m_mem_free=1G -l h_vmem=1G -pe smp 2 -binding linear:2 \
     -N ${N} -o ${EGA1K}/EGAF/pyega3_log/ \
     "source /broad/software/scripts/useuse; reuse .anaconda3-5.3.1; source activate pyega3; ${l};"
done
### check if download is completed
time=$(date +"%m-%d-%Y"_%H-%M)
find ${EGA1K}/EGAF/pyega3_log/ -name *.stderr.log \
 -exec grep -H "Download complete$" {} \; | \
 sed 's#.*\/##g;s#\.stderr.*#.bam#g' | \
 fgrep -vwf - ${EGA1K}/metadata/EGA1K.files.tsv | \
 grep EGAF | sed 's#.*\] ##g' > ${EGA1K}/EGAF/pyega3_log/EGA1K.files.${time}.tsv

rm -rf ${EGA1K}/EGAF/pyega3_bam/*.md5
### check the integrity of downloaded files
use UGER
ish -l h_vmem=1G -binding linear:8 -pe smp 8

use .parallel-20140722

mkdir -p ${EGA1K}/EGAF/pyega3_md5
cat ${EGA1K}/metadata/EGA1K.files.tsv | \
 grep EGAF | sed 's#.*\] ##g' | \
 awk '{print $4"\t"$5}' | sort -t $'\t' -k1,1 > ${EGA1K}/EGAF/pyega3_md5/EGA1K.EGA.md5.tsv
find ${EGA1K}/EGAF/pyega3_bam/ -type f -name *.bam | parallel --no-notice -j 16 md5sum > ${EGA1K}/EGAF/pyega3_md5/EGA1K.BI.md5.txt
cat ${EGA1K}/EGAF/pyega3_md5/EGA1K.BI.md5.txt | \
 awk '{print $1"\t"$2}' | sort -t $'\t' -k1,1 | \
 join -t $'\t' ${EGA1K}/EGAF/pyega3_md5/EGA1K.EGA.md5.tsv \
  - > ${EGA1K}/EGAF/pyega3_md5/EGA1K.EGA_BI.md5.tsv

## gsutil for uploading
### gsutil
use UGER
ish -l h_vmem=1G -binding linear:16 -pe smp 16

use .google-cloud-sdk
gcloud init

use R-3.4
export R_LIBS="~/lib"

EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K
gs=gs://fc-34131473-dcca-4f95-835e-38a13f5edebd
mkdir -p ${EGA1K}/EGAF/gsutil_bam/
gsutil -m rsync ${EGA1K}/EGAF/pyega3_bam gs://fc-34131473-dcca-4f95-835e-38a13f5edebd/pyega3_bam 1> ${EGA1K}/EGAF/gsutil_bam/EGA1K.gsutil_cp.stdout.log 2> ${EGA1K}/EGAF/gsutil_bam/EGA1K.gsutil_cp.stderr.log &
### sample file for FC
cat ${EGA1K}/metadata/EGA1K.files.tsv | \
 grep EGAF | sed 's#.*\] ##g' | \
 awk -v g="${gs}" 'BEGIN{print "sample_id\tmapped_bam"}\
  {s=$5;sub(".bam","",s);\
  print s"\t"g"/pyega3_bam/"$5}' | \
 merge_2file.R -a - -b ${EGA1K}/metadata/EGA1K.samples.tsv \
  -x 1 -y 4 -J | sed '1,1s#^#entity:#g' > ${EGA1K}/metadata/EGA1K.samples.FC.tsv
### participant file for FC
cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
 awk -F "\t" -v OFS="\t" '!a[$6]++{print $6}' | \
 sed '1,1s#^#entity:#g' > ${EGA1K}/metadata/EGA1K.participant.FC.tsv
### sample_set file for FC
cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "membership:sample_set_id","sample_id"}\
  FNR>1{print "EGA1K_all",$1}' > ${EGA1K}/metadata/EGA1K_all.samples_set.FC.tsv
cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "membership:sample_set_id","sample_id"}\
  FNR>1{if($4=="Progressor"){print "EGA1K_P",$1};\
   if($4=="Non-Progressor"){print "EGA1K_NP",$1}}' > ${EGA1K}/metadata/EGA1K_NP.samples_set.FC.tsv
### sample metrics
cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
 datatable.R - -e "d[, .N, by = .(Patient, participant_id, Status, Pathology)]" | \
 sort -k 1,1n -k 4,4r | \
 sed 's#N$#N_samples#g' > ${EGA1K}/metadata/EGA1K.participant.Pathology_N.tsv 
### coverage
cat ${EGA1K}/metadata/EGA1K.samples.MEAN_COVERAGE.tsv | \
 datatable.R - -e "d[, .(TOTAL_COVERAGE=lapply(.SD, sum), SAMPLE_N=.N),  \
  by = .(Patient, participant, Status), \
  .SDcols = c('MEAN_COVERAGE') ]" | \
  sort -k 1,1n > ${EGA1K}/metadata/EGA1K.participant.TOTAL_COVERAGE.tsv 
### time_points
cat ${EGA1K}/metadata/41591_2020_1033_MOESM4_ESM.txt | tail -n +2 | \
 merge_2file.R -a - -b ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
 cut -f 1-4,7-9 | sed '1,1s#^#a\n#' | \
 merge_2file.R -a - -b ${EGA1K}/metadata/41591_2020_1033_MOESM5_ESM.txt \
 -x 2 -y 3 --row_skip 1 | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "participant_id","sample_id","Status","Pathology",\
   "Months_since_initial_endoscopy",$1,"log_Relative_Risk",$4} \
  (FNR>1)&&($7!="NA"){print $7,$2,$5,$6,$12,$1,$3,$4| \
   "sort -k1,1 -k5,5n"}' > ${EGA1K}/metadata/EAG1K.samples.time_points.tsv
### number of samples
cat ${EGA1K}/metadata/EAG1K.samples.time_points.tsv | \
 datatable.R - -e "d[, .N, by=.(participant_id, Status, Pathology)]" | \
 sed 's#N$#N_samples#' > ${EGA1K}/metadata/EAG1K.samples.N_samples.tsv
### summary of SCNA
cat ${EGA1K}/metadata/Table.S8.Longitudinal.BE.Re-analysis.txt | dos2unix | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "participant_id\tprogressor\taneuploid_clones\tfocal\tchr_arm\tterminal_internal\tcomplex_focal"}\
  FNR>1&&$1~/[^[:space:]]/{p="Pt-"$1;\
   g=0;if($2=="Y"){g=1};\
   a=0;if($3>0){a=1};\
   f=0;if($4~/[^[:space:]]/){f=1};\
   c=0;if($5~/[^[:space:]]/){c=1};\
   t=0;if(($6~/[^[:space:]]/)||($7~/[^[:space:]]/)){t=1};\
   x=0;if(($8~/[^[:space:]]/)||($9~/[^[:space:]]/)){x=1};\
   print p,g,a,f,c,t,x}' > ${EGA1K}/metadata/Table.S8.Longitudinal.BE.Pt_SCNA.tsv
cat ${EGA1K}/metadata/Table.S8.Longitudinal.BE.Pt_SCNA.tsv | \
 cut -f 1,4-7 > ${EGA1K}/metadata/Table.S8.Longitudinal.BE.SCNA.tsv 
cat ${EGA1K}/metadata/Table.S8.Longitudinal.BE.Pt_SCNA.tsv | \
 cut -f 1-3 | \
 merge_2file.R -a ${EGA1K}/metadata/EAG1K.samples.N_samples.tsv \
  -b - > ${EGA1K}/metadata/Table.S8.Longitudinal.BE.Pt.tsv
### heatmap on a local machine
mkdir -p ${EGA1K}/Table.S8.Longitudinal.BE.Re-analysis/
cd /Users/cbao/Dropbox\ \(Partners\ HealthCare\)/projects/WGS_EAC/new_data/Table.S8.Longitudinal.BE.Re-analysis/
EGA1K_S8=${EGA1K}/Table.S8.Longitudinal.BE.Re-analysis/
/Users/cbao/Library/CloudStorage/OneDrive-Personal/METHOD/0.Bio-info/pgm/github/projects_cbao/EGA1K_heatmap.R \
 -o Table.S8.Longitudinal.BE.SCNA \
 Table.S8.Longitudinal.BE.SCNA.tsv \
 Table.S8.Longitudinal.BE.Pt.tsv
## statistic
cat ${EGA1K}/metadata/Table.S8.Longitudinal.BE.Pt.tsv | cut -f 1,2,6 | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 merge_2file.R -a - -b ${EGA1K}/metadata/Table.S8.Longitudinal.BE.SCNA.tsv | \
 datatable.R - -e "o=data.table();\
  for (i in 3:ncol(d)) {\
   cn_i = colnames(d)[i]; colnames(d)[i] = 'cn';\
   m = d[, .N, ,by = .(Status,cn)];\
   m = m[order(cn)];\
   m1 = m[Status == 'Progressor', N];\
   m2 = m[Status == 'Non-Progressor', N];\
   m = cbind(m1, m2);\
   p = fisher.test(m)[1];\
   op = data.table(category=cn_i, p=p);\
   colnames(d)[i] = cn_i;\
   o = rbind(o, op)};\
  d=o" > ${EGA1K}/metadata/Table.S8.Longitudinal.BE.p-values.tsv



# PreProcessing for Variant Discovery by GATK4 on Firecloud
use UGER
ish -l h_vmem=1G -binding linear:8 -pe smp 8

use .google-cloud-sdk
gcloud init

mkdir -p ${EGA1K}/CNV_25kb/

EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K
EGA1k_C25=${EGA1K}/CNV_25kb

gsutil -m rm gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/d27e626f-2ab8-470c-9166-f0d55bfa7857/BamToUnmappedBams/**/*.unmapped.bam
gsutil -m rm gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/edcadba4-c9a2-4faa-9fb9-514cd2c2928a/PreProcessingForVariantDiscovery_GATK4/**/*.bam
gsutil -m rm gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/edcadba4-c9a2-4faa-9fb9-514cd2c2928a/PreProcessingForVariantDiscovery_GATK4/**/*.bai
gsutil -m rm gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/54ab3e77-ed8e-44bf-848f-f4e005294114/PreProcessingForVariantDiscovery_GATK4/**/*.bam
gsutil -m rm gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/54ab3e77-ed8e-44bf-848f-f4e005294114/PreProcessingForVariantDiscovery_GATK4/**/*.bai
gsutil -m rm gs://fc-34131473-dcca-4f95-835e-38a13f5edebd/pyega3_bam/*.bam 


# CNV calling by GATK4 on Firecloud
use UGER
ish -l h_vmem=1G -binding linear:8 -pe smp 8

use .google-cloud-sdk
gcloud init

use .bedtools-2.29.0
use R-3.4
export R_LIBS="~/lib"

EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K
EGA1k_md=${EGA1K}/metadata
EGA1k_C25=${EGA1K}/CNV_25kb

## PoN
### copy ratios png for PoN
mkdir -p ${EGA1k_C25}/copy_ratios_plot
cat ${EGA1K}/metadata/EGA1K.sample_Sep242021.FC.tsv | cut -f 1,8,9,13,16 | \
 while read l;do
    ((p=p%16)); ((p++==0)) && wait
    c=(${l});sample_id=${c[0]};patient_id=${c[1]}
    Pathology=${c[2]};Status=${c[3]};png=${c[4]}
    output_basename=${patient_id}.${Status}.${Pathology}.${sample_id}
    CR_png=${EGA1k_C25}/copy_ratios_plot/${output_basename}.denoisedLimit4
    gsutil -m cp ${png} ${CR_png}.png &> ${CR_png}.stderr.log &
done
### copy ratios for PoN
find ${EGA1k_C25}/copy_ratios_PoN -name *.png | \
 sed 's#.*\/##g;s#\.denoised.*##g;s#.*NDBE\.##g' | \
 awk 'BEGIN{print "membership:sample_set_id\tsample_id"}\
  {print "NDBE_PoN\t"$1}' > ${EGA1K}/metadata/EGA1K_PoN.samples_set.FC.tsv
### determine number of eigensamples
gsutil -m cp gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/a5307914-16ad-40ab-ab42-7946f27a4f6e/CNVSomaticPanelWorkflow/dfe490ef-9756-475e-94ef-22cac4094fa7/call-CreateReadCountPanelOfNormals/cacheCopy/NDBE_PoN.pon.hdf5 \
 ${EGA1k_C25}/copy_ratios_PoN/NDBE_PoN.pon.hdf5 &> ${EGA1k_C25}/copy_ratios_PoN/NDBE_PoN.pon.stderr.log
python -c "exec(\"import h5py\\nf=h5py.File('${EGA1k_C25}/copy_ratios_PoN/NDBE_PoN.pon.hdf5', 'r')\\nprint f['panel/singular_values'][:]\")" | sed 's#\[##;s#\]##;s#^ \+##g;s# \+$##g;s#'\''##g;s# \+#\n#g' > ${EGA1k_C25}/copy_ratios_PoN/NDBE_PoN.pon.singular_values.txt
python -c "exec(\"import h5py\\nf=h5py.File('${EGA1k_C25}/copy_ratios_PoN/NDBE_PoN.pon.hdf5', 'r')\\nprint f['panel/sample_filenames'][:]\")" | sed 's#\[##;s#\]##;s#^ \+##g;s# \+$##g;s#'\''##g;s# \+#\n#g' > ${EGA1k_C25}/copy_ratios_PoN/NDBE_PoN.pon.sample_filenames.txt
### denoised copy ratios png 
mkdir -p ${EGA1k_C25}/denoised_copy_ratios_plot
gs=gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245
gsutil -m cp ${gs}/7c62867c-5c36-4d52-b018-1857fdd19f2a/GATK4_PlotDenoisedCopyRatios/**/*.denoisedLimit4.png \
 ${EGA1k_C25}/denoised_copy_ratios_plot/ &> ${EGA1k_C25}/denoised_copy_ratios_plot/gsutil_cp.denoised_copy_ratios_plot.stderr.log
cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | tail -n +2 | \
 while read l;do
    ((p=p%16)); ((p++==0)) && wait
    c=(${l});sample_id=${c[0]};patient_id=${c[5]}
    Pathology=${c[4]};Status=${c[3]}
    output_basename=${patient_id}.${Status}.${Pathology}.${sample_id}
    mv ${EGA1k_C25}/denoised_copy_ratios_plot/${sample_id}.denoisedLimit4.png \
     ${EGA1k_C25}/denoised_copy_ratios_plot/${output_basename}.denoisedLimit4.png &
done
### denoised copy ratios
mkdir -p ${EGA1k_C25}/denoised_copy_ratios
gsutil -m cp gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/94d5d4b6-babc-4996-b9d5-8bcb536e3d08/**/call-DenoiseReadCounts/**/*.denoisedCR.tsv \
 ${EGA1k_C25}/denoised_copy_ratios/ &> ${EGA1k_C25}/denoised_copy_ratios/EGA1k_C25.denoised_copy_ratios.stderr.log &
### allelic read counts
mkdir -p ${EGA1k_C25}/allelic_read_counts
gsutil -m cp gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/a1441e19-9c44-4a62-b352-3295a190a7c4/**/call-CollectAllelicCounts/**/*.allelicCounts.tsv \
 ${EGA1k_C25}/allelic_read_counts/ &> ${EGA1k_C25}/allelic_read_counts/EGA1k_C25.allelic_read_counts.stderr.log &
### preprocessed_intervals
mkdir -p ${EGA1k_C25}/preprocessed_intervals
gsutil -m cp gs://fc-8f41a820-d890-4590-aea2-897047704dc4/b5590901-0a29-4e59-b802-d5a34bb5c166/CNVSomaticPairWorkflow/c3b019d7-930f-40df-9f96-2ddc30ef6b11/call-PreprocessIntervals/wgs_evaluation_regions.v1.1to22.preprocessed.interval_list \
 ${EGA1k_C25}/preprocessed_intervals/EGA1k_C25.preprocessed_intervals_200kb.interval_list &> ${EGA1k_C25}/preprocessed_intervals/EGA1k_C25.preprocessed_intervals_200kb.stderr.log
cat ${EGA1k_C25}/preprocessed_intervals/EGA1k_C25.preprocessed_intervals_200kb.interval_list | \
 grep -v ^@ | awk -F "\t" '{print $1"\t"$2-1"\t"$3}' > ${EGA1k_C25}/preprocessed_intervals/EGA1k_C25.preprocessed_intervals_200kb.bed

mkdir -p ${EGA1k_C25}/denoised_copy_ratios_200kb
preprocessed_intervals_200kb=${EGA1k_C25}/preprocessed_intervals/EGA1k_C25.preprocessed_intervals_200kb.bed
cat ${EGA1k_md}/EGA1K_CNV.participant_set.FC.tsv | awk 'FNR>1{print $2}' | \
 while read participant_id; do
    cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$6==r{print}' | \
     while read so_t;do
        ((p=p%8)); ((p++==0)) && wait
        c=(${so_t});s=${c[0]}
        cat ${EGA1k_C25}/denoised_copy_ratios/${s}.denoisedCR.tsv | \
         awk -F "\t" -v OFS="\t" '$1~/[0-9]/{$2=$2-1;print $0|"sort -k1,1 -k2,2n"}' | \
         bedtools intersect -a stdin -b ${preprocessed_intervals_200kb} -wo | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG.i\tSTART.i\tEND.i\tLOG2_COPY_RATIO\tCONTIG\tSTART\tEND\tov"}\
          !a[$1$2$3]++{$6=$6+1;print}' | \
         datatable.R - -e "d[, .(LOG2_COPY_RATIO=median(LOG2_COPY_RATIO)), \
          by=.(CONTIG, START, END)]" > ${EGA1k_C25}/denoised_copy_ratios_200kb/${s}.denoisedCR_200kb.tsv 2>> ${EGA1k_C25}/denoised_copy_ratios_200kb/EGA1K_C25.denoisedCR_200kb.stderr.log &
    done
    sleep 5s
done


## Call Haplotype
use UGER
ish -l h_vmem=1G -binding linear:8 -pe smp 8

EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K
EGA1k_md=${EGA1K}/metadata
EGA1k_HCP=${EGA1K}/HC_participant

mkdir -p ${EGA1K}/HC_participant/

### add samples_
use Anaconda
use .google-cloud-sdk
gcloud init
source activate dalmatian
gcloud auth application-default login
python -c "exec(\"import dalmatian\\ndalmatian.WorkspaceManager('broad-4900028-bn10-adam/EGA1K_WGS_HG19').update_participant_samples()\")" 
### Download HaplotypeCaller output
use .google-cloud-sdk
gcloud init

mkdir -p ${EGA1k_HCP}/unfiltered_vcf/
gs=gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245
gsutil -m cp ${gs}/33c70bab-9338-4d52-8864-edb9c3543b37/**/call-MergeGVCFs/**/*.HC_unfiltered.vcf.gz \
 ${EGA1k_HCP}/unfiltered_vcf/ &> ${EGA1k_HCP}/unfiltered_vcf/EGA1K_CNV.stderr.log &
### Filter HaplotypeCaller output
use .bcftools-1.10.2

mkdir -p ${EGA1k_HCP}/het_vcf/
cat ${EGA1k_md}/EGA1K_CNV.participant_set.FC.tsv | awk 'FNR>1{print $2}' | \
 while read participant_id; do
    ((p=p%8)); ((p++==0)) && wait
    mkdir -p ${EGA1k_HCP}/het_vcf/${participant_id}/
    het_vcf=${EGA1k_HCP}/het_vcf/${participant_id}/${participant_id}.het
    zcat ${EGA1k_HCP}/unfiltered_vcf/${participant_id}.HC_unfiltered.vcf.gz | \
     bcftools view -f 'PASS,.' -m2 -M2 -v snps | \
     bcftools view -T /cga/bass/Chunyang/ref/hg19/1000G_phase3_v4_20130502.sites.vcf.gz | \
     bcftools view -e 'COUNT(GT="0/0")+COUNT(GT="./.")=N_SAMPLES' | \
     bcftools view -e 'COUNT(GT="1/1")+COUNT(GT="./.")=N_SAMPLES' | \
     bcftools view -i 'COUNT(AD[:0]>0)>2' | \
     bcftools view -i 'COUNT(AD[:1]>0)>2' | \
     bcftools norm -ce -f /cga/bass/Chunyang/ref/hg19/Eagle2/human_g1k_v37.fasta | \
     bcftools view -Oz > ${het_vcf}.vcf.gz 2> ${het_vcf}.stderr.log && \
    S1=`bcftools query -l ${het_vcf}.vcf.gz | head -1` && \
    zcat ${het_vcf}.vcf.gz | \
     bcftools view -s ${S1} | \
     bcftools annotate -x FILTER,INFO,FORMAT | \
     sed 's#\t[\.01]/[\.01]$#\t0/1#g' | \
     bcftools view -Oz > ${het_vcf}.simple.vcf.gz 2>> ${het_vcf}.stderr.log && \
    bcftools index -t ${het_vcf}.vcf.gz 2>> ${het_vcf}.stderr.log && \
    bcftools index -t ${het_vcf}.simple.vcf.gz 2>> ${het_vcf}.stderr.log &
done
wait $!
### determine artifacts
bcftools merge ${EGA1k_HCP}/het_vcf/*/*.het.simple.vcf.gz | \
 bcftools query -H -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' | \
 sed 's#\[[0-9]*\]##g;s#:GT##g;s#\.\/\.#0#g;s#0\/1#1#g' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $1,$2,$3,$4}\
  FNR>1{s=0;for(i=4;i<=NF;i++) s+=$i;\
   if(s>=9){print $1,$2,$3,$4}}' > ${EGA1k_HCP}/het_vcf/EGA1k-all.artifacts.target.list
### remove artifacts
cat ${EGA1k_md}/EGA1K_CNV.participant_set.FC.tsv | awk 'FNR>1{print $2}' | \
 while read participant_id; do
    ((p=p%8)); ((p++==0)) && wait
    het_vcf=${EGA1k_HCP}/het_vcf/${participant_id}/${participant_id}.het
    zcat ${het_vcf}.simple.vcf.gz | \
     bcftools view -T ^${EGA1k_HCP}/het_vcf/EGA1k-all.artifacts.target.list | \
     bcftools view -Oz > ${het_vcf}.filtered.vcf.gz 2> ${het_vcf}.filtered.stderr.log && \
    bcftools index -t ${het_vcf}.filtered.vcf.gz 2>> ${het_vcf}.filtered.stderr.log &
done
wait $!

## haplotype phasing
### denoised_genotype
gs=gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245
gsutil -m cp ${EGA1k_HCP}/het_vcf/*/*.filtered.vcf.gz ${gs}/het_vcf/ &> ${EGA1k_HCP}/het_vcf/gsutil_cp.het_vcf.stderr.log &
gsutil -m cp ${EGA1k_HCP}/het_vcf/*/*.filtered.vcf.gz.tbi ${gs}/het_vcf/ &> ${EGA1k_HCP}/het_vcf/gsutil_cp.het_vcf.stderr.log &
find ${EGA1k_HCP}/het_vcf/ -name *.filtered.vcf.gz | \
 awk -F "\t" -v OFS="\t" -v g="${gs}" 'BEGIN{print "entity:participant_id\tHC_filtered_vcf\tHC_filtered_vcf_index"}\
  {sub(/.*\//,"",$1);f=$1;\
   sub(/\..*/,"",$1);p=$1;\
   print p,g"/het_vcf/"f,g"/het_vcf/"f".tbi"}' > ${EGA1K}/metadata/EGA1K_hets.participant.FC.tsv
### phased genotype
mkdir -p ${EGA1k_HCP}/phased_genotype
gsutil -m cp gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/d260cb65-3b7e-4c9d-98be-ea35e7d5836b/**/call-MergeVCFs/**.het.filtered.eagle_phased.vcf.gz \
 ${EGA1k_HCP}/phased_genotype/ &> ${EGA1k_HCP}/phased_genotype/EGA1k_C25.phased_genotype.stderr.log &
gsutil -m cp gs://fc-secure-e666f262-a332-47b8-a194-a1d7d0769245/d260cb65-3b7e-4c9d-98be-ea35e7d5836b/**/call-MergeVCFs/**.het.filtered.eagle_phased.vcf.gz.tbi \
 ${EGA1k_HCP}/phased_genotype/ &>> ${EGA1k_HCP}/phased_genotype/EGA1k_C25.phased_genotype.stderr.log &
### simple hets
mkdir -p ${EGA1k_HCP}/simple_hets
cat ${EGA1k_md}/EGA1K_CNV.participant_set.FC.tsv | awk 'FNR>1{print $2}' | \
 while read participant_id; do
    cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$6==r{print}' | while read so_t;do
        ((p=p%8)); ((p++==0)) && wait
        c=(${so_t});s=${c[0]}
        simple_hets=${EGA1k_HCP}/simple_hets/${s}.hets
        het_vcf=${EGA1k_HCP}/het_vcf/${participant_id}/${participant_id}.het
        phased_genotype=${EGA1k_HCP}/phased_genotype/${participant_id}.het.filtered
        zcat ${het_vcf}.vcf.gz | \
         bcftools view -s ${s} -T ${phased_genotype}.eagle_phased.vcf.gz | \
         bcftools view -e 'COUNT(GT="./.")=N_SAMPLES' | \
         bcftools query -f '%CHROM\t%POS[\t%AD{0}\t%AD{1}]\t%REF\t%ALT\n' | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG\tPOSITION\tREF_COUNT\tALT_COUNT\tREF_NUCLEOTIDE\tALT_NUCLEOTIDE"}\
          {print}' > ${simple_hets}.allelicCounts.tsv &
    done
done

## determine copy number
use UGER

EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K
EGA1k_md=${EGA1K}/metadata
EGA1k_C25=${EGA1K}/CNV_25kb
EGA1k_HCP=${EGA1K}/HC_participant

### allelic_copy_number_200kb
mkdir -p ${EGA1k_C25}/allelic_copy_number
cat ${EGA1k_md}/EGA1K_CNV.participant_set.FC.tsv | awk 'FNR>1{print $2}' | \
 while read participant_id; do
    > ${EGA1k_C25}/allelic_copy_number/${participant_id}.200kb.plotACN.sh
    cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$6==r{print}' | while read so_t;do
        c=(${so_t});s=${c[0]};pg=${c[3]};st=${c[4]};pt=${c[5]}
        pg=${pg/Non-/N};pg=${pg/Progressor/P};
        ps=${pt}_${pg}_${st}.${s}.200kb
        allelic_copy_number=${EGA1k_C25}/allelic_copy_number/${ps}/${ps}.200kb
        denoised_copy_ratios=${EGA1k_C25}/denoised_copy_ratios_200kb/${s}
        simple_hets=${EGA1k_HCP}/simple_hets/${s}.hets
        phased_genotype=${EGA1k_HCP}/phased_genotype/${participant_id}.het.filtered
        for i in {1..22};do
            a=1;t=2
            d="-d /cga/bass/Chunyang/ref/hg19/Homo_sapiens_assembly19.1_22X.dict"
            p="-p ${phased_genotype}.eagle_phased.vcf.gz"
            b="-b /cga/bass/Chunyang/ref/hg19/cytoBand.txt"
            e="-e ${simple_hets}.allelicCounts.tsv"
            o="-o ${allelic_copy_number}.chr${i}.plotACN"
            r="${denoised_copy_ratios}.denoisedCR_200kb.tsv"
            ACN_base="-s ${ps} -u ${a} -l ${t} -g ${i} --th_hetn 5"
            ACN_input="${d} ${p} ${b} ${e} ${o} ${r}"
            ACN_log="1>> ${allelic_copy_number}.plotACN.stdout.log 2>> ${allelic_copy_number}.plotACN.stderr.log"
            echo "plotACN.R ${ACN_base} ${ACN_input} ${ACN_log}" >> ${EGA1k_C25}/allelic_copy_number/${participant_id}.200kb.plotACN.sh
        done
    done
done
cat ${EGA1k_md}/EGA1K_CNV.participant_set.FC.tsv | awk 'FNR>1{print $2}' | \
 while read participant_id; do
    job_list=${EGA1k_C25}/allelic_copy_number/${participant_id}.200kb.plotACN.sh
    job_counts=`cat ${job_list} | wc -l`
    for i in $(seq 1 ${job_counts});do
       s=`sed -n -e ${i}p ${job_list} | sed 's#.*-s ##g;s# .*##'`
       chr=`sed -n -e ${i}p ${job_list} | sed 's#.*-g ##g;s# .*##'`
       mkdir -p ${EGA1k_C25}/allelic_copy_number/${s}
       qsub -b y -V -cwd -l h_rt=12:00:00 \
        -l m_mem_free=1G -l h_vmem=1G -pe smp 2 -binding linear:2 \
        -N ${s}.${chr} -o ${EGA1k_C25}/allelic_copy_number/${s}/ \
        "use R-3.4; export R_LIBS=~/lib; sed -n -e ${i}p ${job_list} | sh ;"
    done
    sleep 5m
done
### total_copy_number_25kb
mkdir -p ${EGA1k_C25}/total_copy_number_25kb
cat ${EGA1k_md}/EGA1K.participant.FC.tsv | awk 'FNR>1{print $1}' | \
 while read participant_id; do
    > ${EGA1k_C25}/total_copy_number_25kb/${participant_id}.25kb.plotACN.sh
    cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$6==r{print}' | while read so_t;do
        c=(${so_t});s=${c[0]};pg=${c[3]};st=${c[4]};pt=${c[5]}
        pg=${pg/Non-/N};pg=${pg/Progressor/P};
        ps=${pt}_${pg}_${st}.${s}.25kb
        total_copy_number=${EGA1k_C25}/total_copy_number_25kb/${ps}/${ps}.25kb
        denoised_copy_ratios=${EGA1k_C25}/denoised_copy_ratios/${s}
        for i in {1..22};do
            a=1;t=2
            d="-d /cga/bass/Chunyang/ref/hg19/Homo_sapiens_assembly19.1_22X.dict"
            b="-b /cga/bass/Chunyang/ref/hg19/cytoBand.txt"
            o="-o ${total_copy_number}.chr${i}.plotACN"
            r="${denoised_copy_ratios}.denoisedCR.tsv"
            ACN_base="-s ${ps} -u ${a} -l ${t} -g ${i} --th_hetn 5"
            ACN_input="${d} ${b} ${o} ${r}"
            ACN_log="1>> ${total_copy_number}.plotACN.stdout.log 2>> ${total_copy_number}.plotACN.stderr.log"
            echo "plotACN.R ${ACN_base} ${ACN_input} ${ACN_log}" >> ${EGA1k_C25}/total_copy_number_25kb/${participant_id}.25kb.plotACN.sh
        done
    done
done
cat ${EGA1k_md}/EGA1K.participant.FC.tsv | awk 'FNR>1{print $1}' | \
 while read participant_id; do
    job_list=${EGA1k_C25}/total_copy_number_25kb/${participant_id}.25kb.plotACN.sh
    job_counts=`cat ${job_list} | wc -l`
    for i in $(seq 1 ${job_counts});do
       s=`sed -n -e ${i}p ${job_list} | sed 's#.*-s ##g;s# .*##'`
       chr=`sed -n -e ${i}p ${job_list} | sed 's#.*-g ##g;s# .*##'`
       mkdir -p ${EGA1k_C25}/total_copy_number_25kb/${s}
       qsub -b y -V -cwd -l h_rt=12:00:00 \
        -l m_mem_free=1G -l h_vmem=1G -pe smp 2 -binding linear:2 \
        -N ${s}.${chr} -o ${EGA1k_C25}/total_copy_number_25kb/${s}/ \
        "use R-3.4; export R_LIBS=~/lib; sed -n -e ${i}p ${job_list} | sh ;"
    done
    sleep 10m
done

# copy number in 100kb
use UGER
ish -l h_vmem=1G -binding linear:15 -pe smp 15

use R-3.4
export R_LIBS="~/lib"

use .bedtools-2.29.0

EGA1K=/cga/bass/Chunyang/task/Matthew/EGA1K
EGA1k_md=${EGA1K}/metadata
EGA1k_C25=${EGA1K}/CNV_25kb

### denoised_copy_ratios_100kb
preprocessed_100kb_bed=/cga/bass/Chunyang/task/Matthew/WGS_EAC/CNVSomaticPairWorkflow_v4p0p1p2/preprocessed_intervals/hg19.chr22X.100k.preprocessed_intervals.bed
mkdir -p ${EGA1k_C25}/denoised_copy_ratios_100kb
cat ${EGA1k_md}/EGA1K.participant.FC.tsv | awk 'FNR>1{print $1}' | \
 while read participant_id; do
    echo ${participant_id}
    cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$6==r{print}' | while read so_t;do
        ((p=p%4)); ((p++==0)) && wait
        c=(${so_t});s=${c[0]};pg=${c[3]};st=${c[4]};pt=${c[5]}
        pg=${pg/Non-/N};pg=${pg/Progressor/P};
        ps=${pt}_${pg}_${st}.${s}.25kb
        mkdir -p ${EGA1k_C25}/total_copy_number_100kb/${ps}
        copy_ratio_25kb=${EGA1k_C25}/denoised_copy_ratios/${s}
        copy_ratio_100kb=${EGA1k_C25}/denoised_copy_ratios_100kb/${ps}
        cat ${copy_ratio_25kb}.denoisedCR.tsv | \
         grep -v ^@ | grep -v ^CONTIG | \
         awk -F "\t" -v OFS="\t" '{$2=$2-1;print $0|"sort -k1,1 -k2,2n"}' | \
         bedtools intersect -a stdin \
         -b ${preprocessed_100kb_bed} -wo | \
         sort -k1,1 -k2,2n | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG.i\tSTART.i\tEND.i\tLOG2_COPY_RATIO\tCONTIG\tSTART\tEND\tov"}!a[$1$2$3]++{$6=$6+1;print}' | \
         datatable.R - -e "d[, .(LOG2_COPY_RATIO=log2(median(2^LOG2_COPY_RATIO))), by=.(CONTIG, START, END)]" > ${copy_ratio_100kb}.denoisedCR_100kb.tsv &
    done
    wait $!
done
### total_copy_number_100kb
mkdir -p ${EGA1k_C25}/total_copy_number_100kb
cat ${EGA1k_md}/EGA1K.participant.FC.tsv | awk 'FNR>1{print $1}' | \
 while read participant_id; do
    > ${EGA1k_C25}/total_copy_number_100kb/${participant_id}.100kb.plotACN.sh
    cat ${EGA1K}/metadata/EGA1K.samples.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$6==r{print}' | while read so_t;do
        c=(${so_t});s=${c[0]};pg=${c[3]};st=${c[4]};pt=${c[5]}
        pg=${pg/Non-/N};pg=${pg/Progressor/P};
        ps=${pt}_${pg}_${st}.${s}.25kb
        total_copy_number=${EGA1k_C25}/total_copy_number_100kb/${ps/.25kb/.100kb}/${ps}.100kb
        denoised_copy_ratios=${EGA1k_C25}/denoised_copy_ratios_100kb/${ps}
        for i in {1..22};do
            a=1;t=2
            d="-d /cga/bass/Chunyang/ref/hg19/Homo_sapiens_assembly19.1_22X.dict"
            b="-b /cga/bass/Chunyang/ref/hg19/cytoBand.txt"
            o="-o ${total_copy_number}.chr${i}.plotACN"
            r="${denoised_copy_ratios}.denoisedCR_100kb.tsv"
            ACN_base="-s ${ps/.25kb/.100kb} -u ${a} -l ${t} -g ${i} --th_hetn 5"
            ACN_input="${d} ${b} ${o} ${r}"
            ACN_log="1>> ${total_copy_number}.plotACN.stdout.log 2>> ${total_copy_number}.plotACN.stderr.log"
            echo "plotACN.R ${ACN_base} ${ACN_input} ${ACN_log}" >> ${EGA1k_C25}/total_copy_number_100kb/${participant_id}.100kb.plotACN.sh
        done
    done
done
cat ${EGA1k_md}/EGA1K.participant.FC.tsv | awk 'FNR>1{print $1}' | \
 while read participant_id; do
    job_list=${EGA1k_C25}/total_copy_number_100kb/${participant_id}.100kb.plotACN.sh
    job_counts=`cat ${job_list} | wc -l`
    for i in $(seq 1 ${job_counts});do
       s=`sed -n -e ${i}p ${job_list} | sed 's#.*-s ##g;s# .*##'`
       chr=`sed -n -e ${i}p ${job_list} | sed 's#.*-g ##g;s# .*##'`
       mkdir -p ${EGA1k_C25}/total_copy_number_100kb/${s}
       qsub -b y -V -cwd -l h_rt=12:00:00 \
        -l m_mem_free=1G -l h_vmem=1G -pe smp 2 -binding linear:2 \
        -N ${s}.${chr} -o ${EGA1k_C25}/total_copy_number_100kb/${s}/ \
        "use R-3.4; export R_LIBS=~/lib; sed -n -e ${i}p ${job_list} | sh ;"
    done
    sleep 5m
done


