#!/bin/bash

ESAD75=ESAD75
ref_hg19=${ESAD75}/ref_hg19
gatk_dir=${ESAD75}/GATK

ESAD75_FHMeta=${ESAD75}/Firehose_metadata
ESAD75_FCMeta=${ESAD75}/Firecloud_metadata


# GATK4 Mutect2 on Firecloud: GATK4_Mutect2_scatter_gga_v4060
use UGER
ish -l h_vmem=4G -binding linear:4 -pe smp 4

use R-3.4

ESAD75_SSNV=${ESAD75}/GATK4_Mutect2_scatter_gga_v4060
mkdir -p ${ESAD75_SSNV}
## convert maf to alt count matrix
### unfiltered_alt_count (mutation-by-sample alt count matrix)
mkdir -p ${ESAD75_SSNV}/unfiltered_alt_count/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read l;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v p="${l}" 'BEGIN{print "Tumor_Sample_Barcode"}$2==p{print $5}' | \
     grep -Fw -f - ${ESAD75_SSNV}/unfiltered_maf/unfiltered.maf | \
     awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{print $0|"sort -t '"'"'\t'"'"' -k11,11nr -k12,12nr"}' | \
     awk -F "\t" -v OFS="\t" '!a[$2$3$4$7$8$9$10]++{print}' | \
     datatable.R - -e "dcast(data=d, Hugo_Symbol + Chromosome + Start_position + End_position + Variant_Classification + Variant_Type + Reference_Allele + Tumor_Seq_Allele1 + Tumor_Seq_Allele2 ~ Tumor_Sample_Barcode, value.var = 't_alt_count')" | \
     awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{print $0|"sort -t '"'"'\t'"'"' -k2,2 -k3,3n -k4,4n -k9,9"}' > ${ESAD75_SSNV}/unfiltered_alt_count/${l}.unfiltered_alt_count.tsv &
done
### filtered_alt_count (mutation-by-sample alt count matrix)
mkdir -p ${ESAD75_SSNV}/filtered_alt_count/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read l;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v p="${l}" 'BEGIN{print "Tumor_Sample_Barcode"}$2==p{print $5}' | \
     grep -Fw -f - ${ESAD75_SSNV}/filtered_maf/WGS_EAC.filtered.maf | \
     awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{print $0|"sort -t '"'"'\t'"'"' -k11,11nr -k12,12nr"}' | \
     awk -F "\t" -v OFS="\t" '!a[$2$3$4$7$8$9$10]++{print}' | \
     datatable.R - -e "dcast(data=d, Hugo_Symbol + Chromosome + Start_position + End_position + Variant_Classification + Variant_Type + Reference_Allele + Tumor_Seq_Allele1 + Tumor_Seq_Allele2 ~ Tumor_Sample_Barcode, value.var = 't_alt_count')" | \
     awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{print $0|"sort -t '"'"'\t'"'"' -k2,2 -k3,3n -k4,4n -k9,9"}' > ${ESAD75_SSNV}/filtered_alt_count/${l}.filtered_alt_count.tsv &
done
## convert alt count matrix to binary matrix
### forcecalled_alt_count
# To get alt_count for each sample at each filtered mutation site, filtered mutation sites were seleted from the unfiltered (forcecalled) tables
mkdir -p ${ESAD75_SSNV}/forcecalled_alt_count/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read l;do
    cat ${ESAD75_SSNV}/filtered_alt_count/${l}.filtered_alt_count.tsv | \
     awk -F "\t" -v OFS="\t" '{print $1,$2,$3,$4,$5,$6,$7,$8,$9}' | \
     grep -Fw -f - ${ESAD75_SSNV}/unfiltered_alt_count/${l}.unfiltered_alt_count.tsv > ${ESAD75_SSNV}/forcecalled_alt_count/${l}.forcecalled_alt_count.tsv &
done
### forcecalled_binary
# convert alt_count>=3 to 1; convert alt_count<3 to 0
mkdir -p ${ESAD75_SSNV}/forcecalled_binary/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read l;do
    cat ${ESAD75_SSNV}/forcecalled_alt_count/${l}.forcecalled_alt_count.tsv | \
     awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{for(i=9;i++<NF;){if($i=="NA")c++}; if(c==0) print; c=0}' | \
     awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{printf $1;for(i=1;i++<9;) printf "\t"$i;for(i=9;i++<NF;){if($i>=3){printf "\t1"}else{printf "\t0"}};printf "\n"}' > ${ESAD75_SSNV}/forcecalled_binary/${l}.forcecalled_binary.tsv &
done
### forcecalled_binary_similarity
use R-3.5 # for ComplexHeatmap
mkdir -p ${ESAD75_SSNV}/forcecalled_binary_similarity/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read l;do
    cat ${ESAD75_SSNV}/forcecalled_binary/${l}.forcecalled_binary.tsv | \
     awk -F "\t" 'FNR==1||$6=="SNP"{printf $2"_"$3"_"$4"_"$7"_"$8;for(i=9;i++<NF;){printf "\t"$i};printf "\n"}' | \
     transpose -f 500 -t | \
     merge_2file.R -a ${ESAD75_FCMeta}/WGS_EAC.sample__Sample_ID.ordered.tsv -b - -J | \
     transpose -f 500 -t | sed '1,1d' | \
     simBinary.R -o ${ESAD75_SSNV}/forcecalled_binary_similarity/${l} - &> ${ESAD75_SSNV}/forcecalled_binary_similarity/${l}.log &
done


# CNVSomaticPairWorkflow on Firecloud
use UGER
ish -l h_vmem=4G -binding linear:4 -pe smp 4

use R-3.4

ESAD75_SCNV5=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2
mkdir -p ${ESAD75_SCNV5}
## read_count_pon
### determin 
mkdir -p ${ESAD75_SCNV5}/read_count_pon/
python -c "exec(\"import h5py\\nf=h5py.File('${ESAD75_SCNV5}/CNVSomaticPanelWorkflow/read_count_pon/wgs-do-gc.pon.hdf5', 'r')\\nprint f['panel/singular_values'][:]\")" | sed 's#\[##;s#\]##;s#^ \+##g;s# \+$##g;s#'\''##g;s# \+#\n#g' > ${ESAD75_SCNV5}/CNVSomaticPanelWorkflow/read_count_pon/wgs-do-gc.pon.singular_values.txt
python -c "exec(\"import h5py\\nf=h5py.File('${ESAD75_SCNV5}/CNVSomaticPanelWorkflow/read_count_pon/wgs-do-gc.pon.hdf5', 'r')\\nprint f['panel/sample_filenames'][:]\")" | sed 's#\[##;s#\]##;s#^ \+##g;s# \+$##g;s#'\''##g;s# \+#\n#g' > ${ESAD75_SCNV5}/CNVSomaticPanelWorkflow/read_count_pon/wgs-do-gc.pon.sample_filenames.txt

## process GATK4 results
### run model_segments_to_alleliccapseg_converter to determine parameters for ABSOLUTE
mkdir -p ${ESAD75_SCNV5}/model_segments_to_alleliccapseg_converter/
cat ${ESAD75_FHMeta}/Pairs_Samples_1-2.FH.metadata.tsv | \
 awk -F "\t" 'FNR>1' | while read l;do
    c=(${l})
    model-segments-to-alleliccapseg-converter.py \
     ${ESAD75_SCNV5}/modeled_segments_tumor/${c[5]}.modelFinal.seg \
     ${ESAD75_SCNV5}/allele_fraction_parameters_tumor/${c[5]}.modelFinal.af.param \
     ${ESAD75_SCNV5}/model_segments_to_alleliccapseg_converter/${c[0]}.ABSOLUTE__seg_file.tsv \
     ${ESAD75_SCNV5}/model_segments_to_alleliccapseg_converter/${c[0]}.ABSOLUTE__skew.tsv 1> ${ESAD75_SCNV5}/model_segments_to_alleliccapseg_converter/${c[0]}.model_segments_to_alleliccapseg_converter.stdout.log 2> ${ESAD75_SCNV5}/model_segments_to_alleliccapseg_converter/${c[0]}.model_segments_to_alleliccapseg_converter.stderr.log &
done
### prepare alleliccapseg_tsv and AllelicCapseg_skew for ABSOLUTE
echo -e "pair_id\talleliccapseg_tsv\tAllelicCapseg_skew" > ${ESAD75_FHMeta}/Pairs__ABSOLUTE.Mar_12_2018.FH.tsv
cat ${ESAD75_FHMeta}/Pairs_Samples_1-2.FH.metadata.tsv | \
 awk -F "\t" 'FNR>1' | while read l;do
    c=(${l})
    s=`cat ${ESAD75_SCNV5}/model_segments_to_alleliccapseg_converter/${c[0]}.ABSOLUTE__skew.tsv | awk '{printf "%f", $1}'`
    echo -e "${c[0]}\t${ESAD75_SCNV5}/model_segments_to_alleliccapseg_converter/${c[0]}.ABSOLUTE__seg_file.tsv\t${s}" >> ${ESAD75_FHMeta}/Pairs__ABSOLUTE.Mar_12_2018.FH.tsv &
done
### generate gistic seg from called_copy_ratio_segments_tumor
mkdir -p ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/
echo -e "SAMPLE\tCONTIG\tSTART\tEND\tNUM_POINTS_COPY_RATIO\tMEAN_LOG2_COPY_RATIO" > ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/BN10_all.called_copy_ratio_segments_tumor.gistic.seg
find ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor/ -type f -regex .*\.called\.seg$ | \
 while read l;do
    e=`basename ${l} | sed 's#\.called\.seg##'`
    cat ${l} | grep -v ^@ | \
     awk -F "\t" -v e="${e}" 'BEGIN{OFS="\t"}FNR>1{print e,$1,$2,$3,$4,$5}' >> ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/BN10_all.called_copy_ratio_segments_tumor.gistic.seg
done
cat ${ESAD75_FCMeta}/sample_pair_ordered.July302018.FC.tsv | cut -f 2,6 | \
 merge_2file.R -a - -b ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/BN10_all.called_copy_ratio_segments_tumor.gistic.seg -J | \
 cut -f 2,3,4,5,6,7 | \
 sed '1,1s#output_id#SAMPLE#' > ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/BN10_all.called_copy_ratio_segments_tumor.gistic.ordered.seg
cat ${ESAD75_FCMeta}/sample_pair_ordered.July302018.FC.tsv | cut -f 3,6 | \
 awk -F "\t" 'FNR>1' | while read l;do
    c=(${l})
    [[ ! -s ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/${c[0]}.called_copy_ratio_segments_tumor.gistic.ordered.seg ]] \
     && echo -e "SAMPLE\tCONTIG\tSTART\tEND\tNUM_POINTS_COPY_RATIO\tMEAN_LOG2_COPY_RATIO" > ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/${c[0]}.called_copy_ratio_segments_tumor.gistic.ordered.seg
    cat ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/BN10_all.called_copy_ratio_segments_tumor.gistic.ordered.seg | \
     awk -F "\t" -v OFS="\t" -v s="${c[1]}" '$1==s' | sort -k2,2n -k3,3n >> ${ESAD75_SCNV5}/called_copy_ratio_segments_tumor__gistic_seg/${c[0]}.called_copy_ratio_segments_tumor.gistic.ordered.seg
done


# ABSOLUTE__Phylogic on Firecloud


# SvABA_ms on Firecloud (run SvABA on multiple samples)
use UGER
ish -l h_vmem=4G -binding linear:8 -pe smp 8

use R-3.4
export R_LIBS="~/lib"

use .bcftools-1.10.2
use .bedtools-2.29.0

ESAD75_SV=${ESAD75}/SvABA_ms
mkdir -p ${ESAD75}/SvABA_ms
## filtered_somatic_sv_vcf
### determine recurrent SVs in normals (artifects because we assume it is impossible to see any two SVs share exact same bkps in a cohort of 15 patient)
mkdir -p ${ESAD75_SV}/svaba_recurrent_sv/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    ((p=p%8)); ((p++==0)); echo ${participant_id} && wait
    svaba_filtered_sv=${ESAD75_SV}/filtered_somatic_sv_vcf/${participant_id}.svaba.somatic.sv
    svaba_recurrent_sv=${ESAD75_SV}/svaba_recurrent_sv/${participant_id}.svaba_recurrent.sv
    NORM=`zcat ${svaba_filtered_sv}.vcf.gz | sed 's#PL,Number=\.#PL,Number=G#g' | bcftools query -l | grep -i norm` && \
    zcat ${svaba_filtered_sv}.vcf.gz | \
     sed 's#PL,Number=\.#PL,Number=G#g' | \
     bcftools view -s ${NORM} | \
     bcftools annotate -x FILTER,INFO,FORMAT | \
     sed 's#\t[\.01]/[\.01]$#\t0/1#g' | \
     bcftools view -Oz > ${svaba_recurrent_sv}.vcf.gz 2>> ${svaba_recurrent_sv}.stderr.log && \
    bcftools index -t ${svaba_recurrent_sv}.vcf.gz 2>> ${svaba_recurrent_sv}.stderr.log &
done
wait $!
bcftools merge ${ESAD75_SV}/svaba_recurrent_sv/*.svaba_recurrent.sv.vcf.gz | \
 bcftools query -H -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' | \
 sed 's#\[[0-9]*\]##g;s#:GT##g;s#\.\/\.#0#g;s#0\/1#1#g' | \
 awk -F "\t" -v OFS="\t" 'FNR>1{s=0;for(i=4;i<=NF;i++) s+=$i;\
   if(s>1){print $1,$2-1,$2}}' > ${ESAD75_SV}/svaba_recurrent_sv/EAC-all.svaba_recurrent.bed
### svaba_selected_sv (remove artifects)
cat ${ref_hg19}/hg19.svaba.blacklist.bed \
 ${ESAD75_SV}/svaba_recurrent_sv/EAC-all.svaba_recurrent.bed | \
 sort -k1,1 -k2,2n > ${ESAD75_SV}/svaba_recurrent_sv/EAC-all.blacklist.bed
exclude_bed=${ESAD75_SV}/svaba_recurrent_sv/EAC-all.blacklist.bed
mkdir -p ${ESAD75_SV}/svaba_selected_sv_vcf/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    ((p=p%8)); ((p++==0)); echo ${participant_id} && wait
    svaba_filtered_sv=${ESAD75_SV}/filtered_somatic_sv_vcf/${participant_id}.svaba.somatic.sv
    svaba_selected_sv=${ESAD75_SV}/svaba_selected_sv_vcf/${participant_id}.svaba_selected.sv
    filter4svcf.R \
     -o ${svaba_selected_sv}.vcf.gz \
     -b ${exclude_bed} \
     ${svaba_filtered_sv}.vcf.gz &> ${svaba_selected_sv}.stderr.log &
done
### svaba_refined_sv (remove SV shorter than 100kb)
mkdir -p ${ESAD75_SV}/svaba_refined_sv/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    ((p=p%8)); ((p++==0)); echo ${participant_id} && wait
    svaba_selected_sv=${ESAD75_SV}/svaba_selected_sv_vcf/${participant_id}.svaba_selected.sv
    svaba_refined_sv=${ESAD75_SV}/svaba_refined_sv/${participant_id}.svaba_refined.sv
    zcat ${svaba_selected_sv}.vcf.gz | \
     sed 's#PL,Number=\.#PL,Number=G#g' | \
     bcftools view -e 'COUNT(GT="0/0")+COUNT(GT="./.")=N_SAMPLES' | \
     awk -F "\t" -v OFS="\t" '$1~/^[0-9XY]/{c=0;sfi="";split("",sf);split("",sa);split("",sfa); \
      info=$8;split(info,sf,";");for(sfi in sf){if(sf[sfi]~/=/){split(sf[sfi],sfa,"=");sa[sfa[1]]=sfa[2]}}; \
      if(((sa["SPAN"]>=100000)||(sa["SPAN"]==-1))) \
      {split($3,d,":");print d[1]":1\n"d[1]":2"}}' | \
     awk -F "\t" -v OFS="\t" 'BEGIN{print "#\n#CHROM"}!a[$1]++{print}' | \
     fgrep -wf - <(zcat ${svaba_selected_sv}.vcf.gz) | \
     awk -F "\t" -v OFS="\t" '$1~/^#/||!a[$3]++{print}' | \
     sed 's#PL,Number=\.#PL,Number=G#g' | \
     sed '/ID=MAPQ,/a ##INFO=<ID=RMSK,Number=1,Type=String,Description="RMSK">' | \
     sed -f ${ESAD75_FCMeta}/sample__output_id__wgs_bam.sed - | \
     sed 's#\t/cromwell_root/[^\t]\+/WGS_bam/#\t#g' | \
     bcftools view -Oz > ${svaba_refined_sv}.vcf.gz &
done


# method__ACNV_AF
use UGER
ish -l h_vmem=1G -binding linear:4 -pe smp 4

use R-3.4
export R_LIBS="~/lib"

## BinnedMetrics_fun
BinnedMetrics_fun()
{
    output_id=$1; i=$2
    # parameters
    n_id=`cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | awk -F "\t" -v o="${output_id}" '$5==o{print $6}'`
    n_e=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v n="${n_id}" '$4==n{print $2}'`
    e=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v o="${output_id}" '$4==o{print $2}'`
    a=`cat ${ESAD75_ABSOLUTE}__Phylogic/absolute_fc_pp_calls_tab_txt__BN10_all/BN10_all.PP-calls_tab.txt | awk -F "\t" -v o="${output_id}" '$1==o{print $4}'`
    t=`cat ${ESAD75_ABSOLUTE}__Phylogic/absolute_fc_pp_calls_tab_txt__BN10_all/BN10_all.PP-calls_tab.txt | awk -F "\t" -v o="${output_id}" '$1==o{print $5}'`
    # Unphased data
    cat ${ESAD75_SCNV5}_25k/denoised_copy_ratios_tumor/${e}.denoisedCR.tsv | \
     awk -F "\t" -v OFS="\t" -v c="${i}" '$1=="CONTIG"||$1==c{print}' > ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.denoisedCR.tsv && \
    zcat ${ESAD75_SCNV5}/het_allelic_counts_normal_t0_phased1f_vcf/${n_id}.hets.phased1f.vcf.gz | \
     awk -F "\t" -v OFS="\t" -v c="${i}" 'BEGIN{print "CONTIG\tPOSITION"}$1==c{print $1,$2}' | \
     fgrep -wf - ${ESAD75_SCNV5}/allelic_counts_tumor/${e}.allelicCounts.tsv > ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.filtered_hets.tsv && \
    CollectBinnedMetrics.R -s ${e} -u ${a} -l ${t} -g ${i} \
     -e ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.filtered_hets.tsv \
     -o ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics \
     ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.denoisedCR.tsv 1> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.stdout.log 2> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.stderr.log && \
    cat ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.CR.tsv | \
     datatable.R - -e "d[, CN_CR := 2^LOG2_COPY_RATIO]" | \
     cut -f 1-3,5 > ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.CR_antilog.tsv && \
    plotCN.R -s ${output_id} -g ${i} -m "NA" \
     --dots_shape "circle filled" \
     -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
     -b ${ref_hg19}/cytoBand.txt \
     -o ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.plot_CR \
     ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.CR_antilog.tsv 1>> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.stdout.log 2>> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.stderr.log && \
    # Phased data
    CollectBinnedMetrics.R -s ${e} -u ${a} -l ${t} -g ${i} \
     -e ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.filtered_hets.tsv \
     -p ${ESAD75_SCNV5}/het_allelic_counts_normal_t0_phased1f_vcf/${n_id}.hets.phased1f.vcf.gz \
     -o ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1 \
     ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.denoisedCR.tsv 1> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.stdout.log 2> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.stderr.log && \
    cat ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.CN.tsv | \
     awk -F "\t" -v OFS="\t" 'FNR==1{$4="PH1_CN";$5="PH2_CN";\
      print $1,$2,$3,$4,$5}\
      FNR>1{print $1,$2,$3,$4,$5}' > ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.PH_CN.tsv && \
    plotCN.R -s ${output_id} -g ${i} -m "NA" \
     --dots_shape "circle filled" --contour \
     -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
     -b ${ref_hg19}/cytoBand.txt \
     -o ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.plot_P1CN \
     ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.PH_CN.tsv 1>> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.stdout.log 2>> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.stderr.log && \
    cat ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.CN.tsv | \
     awk -F "\t" -v OFS="\t" 'FNR==1{$4="PH1_CN";$5="PH2_CN";\
      print $1,$2,$3,$4,$5}\
      FNR>1{print $1,$2,$3,$6,1-$6}' > ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.PH_AF.tsv && \
    plotCN.R -s ${output_id} -g ${i} -m "NA" \
     --height_adj 6 \
     --dots_shape "circle filled" \
     -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
     -b ${ref_hg19}/cytoBand.txt \
     -o ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.plot_P1AF \
     ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.PH_AF.tsv 1>> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.stdout.log 2>> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.stderr.log && \
    # Tumor hets
    cat ${ESAD75_SCNV5}/het_allelic_counts_normal_t0/${n_e}.hets.tsv | \
     grep -v "^@" | cut -f 1,2 | \
     fgrep -wf - ${ESAD75_SCNV5}/allelic_counts_tumor/${e}.allelicCounts.tsv | \
     awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1{print "CONTIG\tSTART\tEND\tPH1_CN\tPH2_CN"}\
      ($1==i)&&(($3+$4)>0){f=$3/($3+$4);print $1,$2,$2,f,1-f}' > ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.tumor_hets.PH_AF.tsv && \
    plotCN.R -s ${output_id} -g ${i} -m "NA" \
     --height_adj 6 \
     --dots_color "black,black" \
     --dots_shape "circle filled" \
     -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
     -b ${ref_hg19}/cytoBand.txt \
     -o ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.plot_T0AF \
     ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.tumor_hets.PH_AF.tsv 1> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.tumor_hets.stdout.log 2> ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.tumor_hets.stderr.log && \
    rm ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.denoisedCR.tsv && \
    rm ${ESAD75}/figures/method__ACNV_AF/${output_id}.chr${i}.filtered_hets.tsv && \
    rm ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics.*.tsv && \
    rm ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.BinnedMetrics_P1.*.tsv && \
    rm ${ESAD75}/figures/method__ACNV_AF/${output_id}.25kb.chr${i}.tumor_hets.PH_AF.tsv &
}

mkdir -p ${ESAD75}/figures/method__ACNV_AF/
## apply BinnedMetrics_fun
BinnedMetrics_fun EAC-11_15-HGD2 16


# HaplotypeCaller for TP53 and P16
use UGER
ish -l h_vmem=8G -binding linear:16 -pe smp 16

use Java-1.8

## BAM
bam=${ESAD75_FCMeta}/sample__output_id__wgs_bam.Feb182019.tsv
HC_input=`cat ${bam} | awk -F "\t" 'FNR>1{print $5}' | sed 's#\/v[0-9]\+\/#/current/#g;s#^#-I #g' | tr '\n' ' '`
## Directories
output_dir=${ESAD75}/HaplotypeCaller
## References
ref="-R ${ref_hg19}/Homo_sapiens_assembly19.fasta";
## Standard engine parameters
run_GATK4="-jar ${gatk_dir}/gatk.jar"
GATK4_standard_filter="--read-filter PassesVendorQualityCheckReadFilter --read-filter HasReadGroupReadFilter \
 --read-filter NotDuplicateReadFilter --read-filter MappingQualityAvailableReadFilter"
ProperPair_filter="--read-filter PairedReadFilter \
	--read-filter FragmentLengthReadFilter --max-fragment-length 1000 --read-filter MateOnSameContigOrNoMappedMateReadFilter --read-filter MateDifferentStrandReadFilter"
## GATK4 HC cmd
GATK4_HC_rf="--read-filter MappingQualityReadFilter --minimum-mapping-quality 30 --read-filter OverclippedReadFilter --filter-too-short 25 --read-filter GoodCigarReadFilter --read-filter AmbiguousBaseReadFilter "
GATK4_HC_Discovery="${run_GATK4} HaplotypeCaller --genotyping-mode DISCOVERY --disable-tool-default-annotations true --annotation DepthPerAlleleBySample --annotation Coverage ${ref} ${GATK4_standard_filter} ${GATK4_HC_rf} \
	--native-pair-hmm-threads 2 --output-mode EMIT_ALL_SITES  --seconds-between-progress-updates 100"
## run HC for P53
P53_dir=${output_dir}/TP53
tmp=${P53_dir}/tmp/
mkdir -p ${tmp}
java -Xmx4000m -Djava.io.tmpdir=${tmp} \
 ${GATK4_HC_Discovery} ${HC_input} \
 -L 17:7,569,720-7,592,868 \
 -O ${P53_dir}/WGS_EAC.HC_TP53.vcf 1> ${P53_dir}/WGS_EAC.HC_TP53.stdout.log 2> ${P53_dir}/WGS_EAC.HC_TP53.stderr.log &
cat ${P53_dir}/WGS_EAC.HC_TP53.vcf | \
 sed 's#17\t7577581\t.\tA\tAACAT#17\t7577581\t.\tAGTGG\tAACATGTGGTA#' > ${P53_dir}/WGS_EAC.HC_TP53.H233fs.vcf
## run HC for P16
P16_dir=${output_dir}/P16
tmp=${P16_dir}/tmp/
mkdir -p ${tmp}
java -Xmx4000m -Djava.io.tmpdir=${tmp} \
 ${GATK4_HC_Discovery} ${HC_input} \
 -L 9:21,965,751-22,011,312 \
 -O ${P16_dir}/WGS_EAC.HC_P16.vcf 1> ${P16_dir}/WGS_EAC.HC_P16.stdout.log 2> ${P16_dir}/WGS_EAC.HC_P16.stderr.log &
## run HC for ARID1A
ARID1A_dir=${output_dir}/ARID1A
tmp=${ARID1A_dir}/tmp/
mkdir -p ${tmp}
java -Xmx4000m -Djava.io.tmpdir=${tmp} \
 ${GATK4_HC_Discovery} ${HC_input} \
 -L 1:27,020,506-27,110,595 \
 -O ${ARID1A_dir}/WGS_EAC.HC_ARID1A.vcf 1> ${ARID1A_dir}/WGS_EAC.HC_ARID1A.stdout.log 2> ${ARID1A_dir}/WGS_EAC.HC_ARID1A.stderr.log &
## run HC for ARID1B
ARID1B_dir=${output_dir}/ARID1B
tmp=${ARID1B_dir}/tmp/
mkdir -p ${tmp}
java -Xmx4000m -Djava.io.tmpdir=${tmp} \
 ${GATK4_HC_Discovery} ${HC_input} \
 -L 6:157,095,160-157,533,913 \
 -O ${ARID1B_dir}/WGS_EAC.HC_ARID1B.vcf 1> ${ARID1B_dir}/WGS_EAC.HC_ARID1B.stdout.log 2> ${ARID1B_dir}/WGS_EAC.HC_ARID1B.stderr.log &
## run HC for SMARCA4
SMARCA4_dir=${output_dir}/SMARCA4
tmp=${SMARCA4_dir}/tmp/
mkdir -p ${tmp}
java -Xmx4000m -Djava.io.tmpdir=${tmp} \
 ${GATK4_HC_Discovery} ${HC_input} \
 -L 19:11,069,706-11,174,947 \
 -O ${SMARCA4_dir}/WGS_EAC.HC_SMARCA4.vcf 1> ${SMARCA4_dir}/WGS_EAC.HC_SMARCA4.stdout.log 2> ${SMARCA4_dir}/WGS_EAC.HC_SMARCA4.stderr.log &


# HaplotypeCaller for whole genome
use UGER

## parameters
### BAM files
BN10_WGS_bam=${ESAD75_FCMeta}/sample__output_id__wgs_bam.Feb182019.tsv
### Directories
output_dir=${ESAD75}/HaplotypeCaller
scatter_intervals_dir=${ref_hg19}/hg19_scatter_300
### References
ref="-R ${ref_hg19}/Homo_sapiens_assembly19.fasta"
### JAR parameters
tmp=${output_dir}/tmp
GATK4=${gatk_dir}/gatk.jar;
### GATK4 parameters
run_GATK4="java -Xmx8000m -Djava.io.tmpdir=${tmp} -jar ${GATK4}"
GATK4_standard_filter="--read-filter PassesVendorQualityCheckReadFilter --read-filter HasReadGroupReadFilter \
 --read-filter NotDuplicateReadFilter --read-filter MappingQualityAvailableReadFilter"
ProperPair_filter="--read-filter PairedReadFilter \
	--read-filter FragmentLengthReadFilter --max-fragment-length 1000 --read-filter MateOnSameContigOrNoMappedMateReadFilter --read-filter MateDifferentStrandReadFilter"
### GATK4 HC parameters
GATK4_HC_rf="--read-filter MappingQualityReadFilter --minimum-mapping-quality 30 --read-filter OverclippedReadFilter --filter-too-short 25 --read-filter GoodCigarReadFilter --read-filter AmbiguousBaseReadFilter "
GATK4_HC_Discovery="${run_GATK4} HaplotypeCaller --genotyping-mode DISCOVERY --disable-tool-default-annotations true --annotation DepthPerAlleleBySample --annotation Coverage ${ref} ${GATK4_standard_filter} ${GATK4_HC_rf} \
	--native-pair-hmm-threads 2 --output-mode EMIT_ALL_SITES  --seconds-between-progress-updates 100"
BN10_HC=${ESAD75}/HaplotypeCaller

## HaplotypeCaller
### prepare scripts
mkdir -p ${output_dir}/tmp
mkdir -p ${output_dir}/HC_cmd
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   > ${output_dir}/HC_cmd/${participant_id}.HC.sh
   HC_bams=`cat ${BN10_WGS_bam} | awk -F "\t" -v p="${participant_id}" '$3==p{print $5}'`
   HC_input=`echo ${HC_bams} | sed 's#\/v[0-9]\+\/#/current/#g;s# # -I #g;s#^# -I #g;'`
   for interval in ${scatter_intervals_dir}/*.interval_list;do
      HC_id=`basename ${interval} | sed 's#-scattered.interval_list##'`
      HC_prefix=${output_dir}/HC_vcf/${participant_id}/${participant_id}.gatk4_HC.${HC_id}
      HC_O=${HC_prefix}.vcf.gz
      HC_log="1> ${HC_prefix}.stdout.log 2> ${HC_prefix}.stderr.log"
      echo "${GATK4_HC_Discovery} ${HC_input} -L ${interval} -O ${HC_O} ${HC_log}" >> ${output_dir}/HC_cmd/${participant_id}.HC.sh
   done
done
### qsub scripts
mkdir -p ${output_dir}/HC_vcf
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   job_list=${output_dir}/HC_cmd/${participant_id}.HC.sh
   job_counts=`cat ${job_list} | wc -l`
   mkdir -p ${output_dir}/HC_vcf/${participant_id}
   for i in $(seq 1 ${job_counts});do
      qsub -b y -V -cwd -l h_rt=5:00:00 \
      -l m_mem_free=8G -l h_vmem=8G -pe smp 2 -binding linear:2 \
       -N ${participant_id}.${i} -o ${output_dir}/HC_vcf/${participant_id}/ \
       "source /broad/software/scripts/useuse; reuse -q Java-1.8; sed -n -e ${i}p ${job_list} | sh ;"
   done
   sleep 3h
done
### check integrity
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   MDY=$(date +"%m-%d-%Y"_%H)
   # list of stderr containing the signal
   find ${output_dir}/HC_vcf/${participant_id} \
    -regex .*\.gatk4_HC\.[0-9]+\.stderr\.log$ \
    -exec grep -H "HaplotypeCaller done\." {} \; | \
    sort > ${output_dir}/HC_vcf/${participant_id}/${participant_id}.gatk4_HC.all.${MDY}.stderr.log && \
   # compare with the original list
   find ${ref_hg19}/hg19_scatter_300/ \
    -regex .*\.-scattered\.interval_list$ | \
    sed "s#.*/#${output_dir}/HC_vcf/${participant_id}/${participant_id}.gatk4_HC.#g" | \
   sed 's#-scattered\.interval_list#.stderr.log#g' | sort | \
   join -v 1 -t ":" - ${output_dir}/HC_vcf/${participant_id}/${participant_id}.gatk4_HC.all.${MDY}.stderr.log | \
   sort > ${output_dir}/HC_vcf/${participant_id}/${participant_id}.gatk4_HC.unfinished.${MDY}.stderr.log &
done
### finish the unfinished
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   MDY=$(date +"%m-%d-%Y"_%H)
   job_list=${output_dir}/HC_cmd/${participant_id}.HC.sh
   cat ${output_dir}/HC_vcf/${participant_id}/${participant_id}.gatk4_HC.unfinished.${MDY}.stderr.log | \
    sed 's#.*\.gatk4_HC\.##g;s#\.stderr\.log##g' | \
    sed 's#^0*##g' | while read it;do
      i=$((it+1))
      qsub -b y -V -cwd -l h_rt=22:00:00 \
      -l m_mem_free=8G -l h_vmem=8G -pe smp 2 -binding linear:2 \
       -N ${participant_id}.${i} -o ${output_dir}/HC_vcf/${participant_id}/ \
       "source /broad/software/scripts/useuse; reuse -q Java-1.8; sed -n -e ${i}p ${job_list} | sh ;"
   done
done
### merge unfiltered vcf
use UGER
ish -l h_vmem=16G -binding linear:2 -pe smp 2

use Java-1.8

BN10_HC=${ESAD75}/HaplotypeCaller
mkdir -p ${BN10_HC}/unfiltered_vcf/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   mkdir -p ${BN10_HC}/unfiltered_vcf/${participant_id}/
   find ${BN10_HC}/HC_vcf/${participant_id} \
    -regex .*\.gatk4_HC\.[0-9]+\.vcf\.gz$ | \
    sort > ${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.vcf.list
   java -Xmx4000m -Djava.io.tmpdir=${BN10_HC}/tmp \
    -jar ${gatk_dir}/picard.jar MergeVcfs \
     I=${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.vcf.list \
     O=${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.vcf.gz \
     D=${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict 1> ${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.stdout.log 2> ${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.stderr.log
done


# call SNVs within oncogenes
use UGER
ish -l h_vmem=1G -binding linear:8 -pe smp 8

use Java-1.8
use R-3.4
export R_LIBS="~/lib"

BN10_HC=${ESAD75}/HaplotypeCaller
## filter
### filter SNVs within oncogenes
mkdir -p ${BN10_HC}/oncogene_vcf/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   ((p=p%8)); ((p++==0)) && wait
   mkdir -p ${BN10_HC}/oncogene_vcf/${participant_id}/
   f2o=${BN10_HC}/oncogene_vcf/${participant_id}/${participant_id}.gatk4_HC.oncogene && \
   NORM=`bcftools query -l ${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.vcf.gz | grep -in norm | sed 's#:.*$##g'` && \
   zcat ${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.vcf.gz | \
    bcftools view -f 'PASS,.' -m2 -M2 -v snps,indels | \
    bcftools view -T ${ref_hg19}/Census_allTue_May_1_23_15_50_2018.GRCh_37_e.p250.chr.bed | \
    bcftools view -T ^${ref_hg19}/mskcc_hg19.rmsk_mod.chr.bed | \
    bcftools view -T ^${ref_hg19}/mskcc_hg19.wgEncodeDacMapabilityConsensusExcludable.chr.bed | \
    bcftools view -i "FORMAT/GT[$((NORM-1))]='0/0'" | \
    bcftools view -i "MAX(AD[:1])>2 & COUNT(AD[:1]>=2)>=2" | \
    sed -f ${ESAD75_FCMeta}/sample__output_id.sed - | \
    bcftools view -Oz > ${f2o}.vcf.gz 2> ${f2o}.stderr.log && \
    bcftools index -t ${f2o}.vcf.gz 2>> ${f2o}.stderr.log &
done
## annotation
### annotate with snpEff (by CZ)
### convert annotated VCF to readable table
snpEff_dir=/cga/bass/Chunyang/tools/snpEff/snpEff
mkdir -p ${BN10_HC}/oncogene_ann_tsv/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   ((p=p%8)); ((p++==0)) && wait
   mkdir -p ${BN10_HC}/oncogene_ann_tsv/${participant_id} && \
   f2o=${BN10_HC}/oncogene_vcf/${participant_id}/${participant_id}.gatk4_HC.oncogene && \
   f2a=${BN10_HC}/oncogene_ann_vcf/${participant_id}.gatk4_HC.oncogene && \
   f2s=${BN10_HC}/oncogene_ann_tsv/${participant_id}/${participant_id}.gatk4_HC.oncogene && \
   cat ${f2a}.ann.vcf | \
    ${snpEff_dir}/scripts/vcfEffOnePerLine.pl | \
    java -Xmx1000m -Djava.io.tmpdir=${BN10_HC}/tmp \
     -jar ${snpEff_dir}/SnpSift.jar extractFields - \
      CHROM POS REF ALT \
      "ANN[*].EFFECT" "ANN[*].IMPACT" \
      "ANN[*].GENE" "ANN[*].GENEID" \
      "ANN[*].FEATURE" "ANN[*].FEATUREID" \
      "ANN[*].BIOTYPE" "ANN[*].RANK" \
      "ANN[*].HGVS_C" "ANN[*].HGVS_P" | \
    awk -F "\t" -v OFS="\t" 'FNR==1{print}\
     FNR>1&&$5!="synonymous_variant"&&($14!=""||$5~/splice/){print}' | \
    sed '1,1s#\[\*\]\.#_#g' > ${f2s}.ann_ns.tsv 2> ${f2s}.stderr.tsv && \
   zcat ${f2o}.vcf.gz | \
    bcftools query -H -f '%CHROM\t%POS\t%REF\t%ALT[\t%AD{1}]\n' | \
    sed '1,1s/^\# //g;1,1s#\[[0-9]\+\]##g;1,1s#:AD##g' | \
    merge_2file.R -a ${f2s}.ann_ns.tsv -b - \
     -x CHROM,POS,REF,ALT -y CHROM,POS,REF,ALT \
     -J > ${f2s}.ann_ns.AD.tsv 2>> ${f2s}.stderr.tsv && \
   cat ${f2s}.ann_ns.tsv | \
    awk -F "\t" 'BEGIN{print "#\n#CHROM"}FNR>1{print $1"\t"$2}' | \
    fgrep -wf - ${f2a}.ann.vcf > ${f2s}.ann_ns.vcf 2>> ${f2s}.stderr.tsv &
done

# select heterozygous variants for haplotype-specific copy-number calculation
use UGER
ish -l h_vmem=1G -binding linear:15 -pe smp 15

use R-3.4
export R_LIBS="~/lib"

use .bcftools-1.10.2
use .bedtools-2.29.0


ESAD75_FHMeta=${ESAD75}/Firehose_metadata
ESAD75_FCMeta=${ESAD75}/Firecloud_metadata

BN10_HC=${ESAD75}/HaplotypeCaller

ESAD75_SCNV5=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2
ESAD75_SCNV25=${ESAD75_SCNV5}_25k

# determine gender
cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | \
 awk -F "\t" '$1~/-Normal-/{printf "%s\t%.0f\n", $2,$4}' | \
 awk -F "\t" 'BEGIN{print "participant_id\tsex"}\
  {if($2==2){s="male"}else{s="female"};print $1"\t"s}' > ${ESAD75_FCMeta}/participant_id.sex.tsv
### determine het sites
mkdir -p ${BN10_HC}/het_vcf/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   ((p=p%8)); ((p++==0)) && wait
   mkdir -p ${BN10_HC}/het_vcf/${participant_id}/
   zcat ${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.vcf.gz | \
    bcftools view -f 'PASS,.' -m2 -M2 -v snps | \
    bcftools view -T ${ref_hg19}/1000G_phase3_v4_20130502.sites.vcf.gz | \
    bcftools view -e 'COUNT(GT="0/0")+COUNT(GT="./.")=N_SAMPLES' | \
    bcftools view -e 'COUNT(GT="1/1")+COUNT(GT="./.")=N_SAMPLES' | \
    bcftools view -i 'COUNT(AD[:0]>2)>2' | \
    bcftools view -i 'COUNT(AD[:1]>2)>2' | \
    bcftools norm -ce -f ${ref_hg19}/Eagle2/human_g1k_v37.fasta | \
    sed -f ${ESAD75_FCMeta}/sample__output_id.sed - | \
    sed 's#13_14_Adj_Sq_(Norm)#EAC-13_14-NORM#g' | \
    bcftools view -Oz > ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.vcf.gz 2> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.stderr.log && \
   NORM=`bcftools query -l ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.vcf.gz | grep -i norm` && \
   zcat ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.vcf.gz | \
    bcftools view -s ${NORM} | \
    bcftools annotate -x FILTER,INFO,FORMAT | \
    sed 's#\t[\.01]/[\.01]$#\t0/1#g' | \
    bcftools view -Oz > ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het_simple.vcf.gz 2>> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.stderr.log && \
   bcftools index -t ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.vcf.gz 2>> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.stderr.log && \
   bcftools index -t ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het_simple.vcf.gz 2>> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.stderr.log &
done
wait $!
### determine artifacts for SNP
bcftools merge ${BN10_HC}/het_vcf/*/*.het_simple.vcf.gz | \
 bcftools query -H -f '%CHROM\t%POS\t%REF\t%ALT[\t%GT]\n' | \
 sed 's#\[[0-9]*\]##g;s#:GT##g;s#\.\/\.#0#g;s#0\/1#1#g' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $1,$2,$3,$4}\
  FNR>1{s=0;for(i=4;i<=NF;i++) s+=$i;\
   if(s>7){print $1,$2,$3,$4}}' > ${BN10_HC}/het_vcf/EAC-all.artifacts.target.list
### determine het sites for chrX
cat ${ESAD75_FCMeta}/participant_id.sex.tsv | \
 awk -F "\t" 'FNR>1&&$2=="female"{print $1}' | while read participant_id;do
   ((p=p%8)); ((p++==0)) && wait
   mkdir -p ${BN10_HC}/het_vcf/${participant_id}/
   zcat ${BN10_HC}/unfiltered_vcf/${participant_id}/${participant_id}.gatk4_HC.unfiltered.vcf.gz | \
    bcftools view -f 'PASS,.' -m2 -M2 -v snps | \
    bcftools view -T ${ref_hg19}/ALL.chrX.phase3_integrated.20130502.cleaned_norm.sites.vcf.gz | \
    bcftools view -e 'COUNT(GT="0/0")+COUNT(GT="./.")=N_SAMPLES' | \
    bcftools view -e 'COUNT(GT="1/1")+COUNT(GT="./.")=N_SAMPLES' | \
    bcftools view -i 'COUNT(AD[:0]>2)>2' | \
    bcftools view -i 'COUNT(AD[:1]>2)>2' | \
    bcftools norm -ce -f ${ref_hg19}/Eagle2/human_g1k_v37.fasta | \
    sed -f ${ESAD75_FCMeta}/sample__output_id.sed - | \
    sed 's#13_14_Adj_Sq_(Norm)#EAC-13_14-NORM#g' | \
    bcftools view -Oz > ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.chrX.het.vcf.gz 2>> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.stderr.log && \
   bcftools index -t ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.chrX.het.vcf.gz 2>> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het.stderr.log &
done
wait $!
### remove artifacts
BN10_HC=${ESAD75}/HaplotypeCaller
mkdir -p ${BN10_HC}/het_vcf/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   ((p=p%15)); ((p++==0)) && wait
   mkdir -p ${BN10_HC}/het_vcf/${participant_id}/
   zcat ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het_simple.vcf.gz | \
    bcftools view -T ^${BN10_HC}/het_vcf/EAC-all.artifacts.target.list | \
    bcftools view -Oz > ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het_filtered.vcf.gz 2> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het_filtered.stderr.log && \
   bcftools index -t ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het_filtered.vcf.gz 2>> ${BN10_HC}/het_vcf/${participant_id}/${participant_id}.het_filtered.stderr.log &
done
wait $!
## haplotype phasing
### denoised_genotype
mkdir -p ${ESAD75_SCNV25}/denoised_genotype
cat ${ESAD75_FCMeta}/participant_id.sex.tsv| \
 awk -F "\t" '$2=="female"{print $1}' | while read participant_id;do
    echo ${participant_id}
    # prefix
    denoised_genotype=${ESAD75_SCNV25}/denoised_genotype/${participant_id}
    # reserve the original data from eagle2
    mv ${denoised_genotype}.denoised_genotype.vcf.gz \
     ${denoised_genotype}.denoised_genotype.eagle2.vcf.gz
    mv ${denoised_genotype}.chrX.denoised_genotype.vcf.gz \
     ${denoised_genotype}.chrX.denoised_genotype.eagle2.vcf.gz
    normal_ncol=`zcat ${denoised_genotype}.chrX.denoised_genotype.eagle2.vcf.gz | grep '^#CHROM' | tr '\t' '\n' | grep -ni NORM | sed 's#:.*##'`
    zcat ${denoised_genotype}.chrX.denoised_genotype.eagle2.vcf.gz | grep -v '^#' | \
     cut -f 1-9,${normal_ncol} | \
     cat <(zcat ${denoised_genotype}.denoised_genotype.eagle2.vcf.gz) \
      - | gzip > ${denoised_genotype}.denoised_genotype.vcf.gz 
done
### allelic_fraction
mkdir -p ${ESAD75_SCNV25}/allelic_fraction
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    n=`cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | awk -F "\t" -v r="${participant_id}" '$2==r{print}' | wc -l`
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%$((n-1)))); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        s=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v o="${output_id}" '$4==o{print $2}'`
        denoised_genotype=${ESAD75_SCNV25}/denoised_genotype/${participant_id}
        allelic_counts=${BN10_C5}/allelic_counts_tumor/${s}
        allelic_fraction=${ESAD75_SCNV25}/allelic_fraction/${output_id}
        ACN_AF.R -g ${denoised_genotype}.denoised_genotype.vcf.gz \
         ${allelic_counts}.allelicCounts.tsv > ${allelic_fraction}.allelic_fraction.tsv &
    done
    wait $!
done
### allelic_copy_number_25kb
ESAD75_SCNV25=${ESAD75_SCNV5}_25k
mkdir -p ${ESAD75_SCNV25}/allelic_copy_number_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    n=`cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | awk -F "\t" -v r="${participant_id}" '$2==r{print}' | wc -l`
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%2)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]}
        echo ${output_id}
        a=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $2}'`
        t=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $3}'`
        r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
        x=$((2/r))
        allelic_fraction=${ESAD75_SCNV25}/allelic_fraction/${output_id}
        copy_ratio_25kb=${ESAD75_SCNV25}/denoised_copy_ratios_tumor_1to22X/${output_id}
        copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb/${output_id}
        ACN_CN.R -e ${allelic_fraction}.allelic_fraction.tsv -x ${x} \
         ${copy_ratio_25kb}.denoisedCR.tsv > ${copy_number_25kb}.allelic_CN.25kb.tsv && \
        [[ ${x} = 1 ]] && \
         cat ${copy_ratio_25kb}.denoisedCR.tsv | \
          awk -F "\t" -v OFS="\t" '$1=="CONTIG"||$1=="X"' | \
          ACN_CN.R -x ${x} - | \
          awk -F "\t" -v OFS="\t" 'FNR>1{print $1,$2,$3,$4,"NA","NA","NA"}' >> ${copy_number_25kb}.allelic_CN.25kb.tsv &
    done
    wait $!
done
### allelic_copy_number_25kb_pdf
mkdir -p ${ESAD75_SCNV25}/allelic_copy_number_25kb_pdf
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
    x=$((2/r))
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        mkdir -p ${ESAD75_SCNV25}/allelic_copy_number_25kb_pdf/${output_id}
        # prefix
        copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb/${output_id}
        allelic_copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb_pdf/${output_id}/${output_id}
        > ${allelic_copy_number_25kb}.allelic_CN.25kb.stderr.log
        # plotCN
        for i in {{1..22},X};do
            ((p=p%15)); ((p++==0)) && wait
            a=",5"
            [[ (${i} == X) && (${x} == 1) ]] && a=""
            cat ${copy_number_25kb}.allelic_CN.25kb.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1||$1==i{print}' | \
             sed 's#CN_A#PH1_CN#g;s#CN_B#PH2_CN#g' | \
             cut -f 1-4${a} > ${allelic_copy_number_25kb}.chr${i}.allelic_CN.25kb.tsv && \
            plotCN.R -s ${output_id} -g ${i} \
             --dots_shape "circle filled" --ylab "" \
             --th_nbin 9 --dots_size 1 -m "NA" \
             -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
             -b ${ref_hg19}/cytoBand.txt \
             -o ${allelic_copy_number_25kb}.chr${i}.allelic_CN.plot \
             ${allelic_copy_number_25kb}.chr${i}.allelic_CN.25kb.tsv &>> ${allelic_copy_number_25kb}.allelic_CN.25kb.stderr.log && \
            rm -f ${allelic_copy_number_25kb}.chr${i}.allelic_CN.25kb.tsv &
        done
        wait $!
    done
done
### mean_coverage_25kb
preprocessed_bed_25kb=${ESAD75_SCNV25}/preprocessed_intervals/Homo_sapiens_assembly19.fasta.wgs_intervals.1_22X.preprocessed.bed
mkdir -p ${ESAD75_SCNV25}/mean_coverage_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%3)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        s=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v o="${output_id}" '$4==o{print $2}'`
        # prefix
        allelic_counts=${BN10_C5}/allelic_counts_tumor/${s}
        mean_coverage_25kb=${ESAD75_SCNV25}/mean_coverage_25kb/${output_id}
        # mean coverage
        cat ${allelic_counts}.allelicCounts.tsv | \
         awk -F "\t" -v OFS="\t" '$1~/^[0-9X]/{print $1,$2-1,$2,$3+$4}' | \
         sort -k1,1 -k2,2n | \
         bedtools intersect -a ${preprocessed_bed_25kb} -b stdin -wao | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG\tSTART\tEND\tPOSITION\tCOV"}\
          {print $1,$2,$3,$6,$7}' | \
         datatable.R - -e "d[COV == '.', COV := NA];d[, COV := as.numeric(COV)];\
          d=d[, .(MEAN_COV = mean(.SD[!is.na(COV), COV])), by = .(CONTIG,START,END)]" | \
         tail -n +2 > ${mean_coverage_25kb}.mean_coverage.25kb.bed &
    done
    wait $!
done
### denoised_copy_ratio_25kb
BN10_C5=${ESAD75_SCNV5}
ESAD75_SCNV25=${ESAD75_SCNV5}_25k
preprocessed_bed_25kb=${ESAD75_SCNV25}/preprocessed_intervals/Homo_sapiens_assembly19.fasta.wgs_intervals.1_22X.preprocessed.bed
mkdir -p ${ESAD75_SCNV25}/denoised_copy_ratio_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    n=`cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | awk -F "\t" -v r="${participant_id}" '$2==r{print}' | wc -l`
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%2)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        s=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v o="${output_id}" '$4==o{print $2}'`
        # prefix
        copy_ratio_25kb=${ESAD75_SCNV25}/denoised_copy_ratios_tumor_1to22X/${output_id}
        mean_coverage_25kb=${ESAD75_SCNV25}/mean_coverage_25kb/${output_id}
        copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb/${output_id}
        denoised_copy_ratio_25kb=${ESAD75_SCNV25}/denoised_copy_ratio_25kb/${output_id}
        # process
        cat ${copy_ratio_25kb}.denoisedCR.tsv | \
         awk -F "\t" -v OFS="\t" '$1~/^[0-9X]/{print $1,$2-1,$3,$4}' | \
         sort -k1,1 -k2,2n | \
         bedtools intersect -a ${preprocessed_bed_25kb} -b stdin -wao | \
         cut -f 1-3,7 | \
         bedtools intersect -a stdin -b ${mean_coverage_25kb}.mean_coverage.25kb.bed -wao | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "c\ts\te\tl\tr"} \
          {print $1,$2+1,$3,$4,$8}' | \
         merge_2file.R -a - -b ${copy_number_25kb}.allelic_CN.25kb.tsv -x 1,2,3 -y 1,2,3 | \
         tail -n +2 | sort -k1,1 -k2,2n | \
         awk -F "\t" -v OFS="\t" 'BEGIN{$1="contig";$2="start";$3="end";\
          $4="log2_denoised_coverage";$5="mean_read_counts";\
          $6="hets_with_genotype";$7="allelic_fraction";\
          print $1,$2,$3,$4,$5,$6,$7}\
          FNR>1{print $1,$2,$3,$4,$5,$9,$8}' > ${denoised_copy_ratio_25kb}.coverage.tsv &
    done
done
### haplotype_phase by CZ
mkdir -p ${ESAD75_SCNV25}/Allelic_depth_phasing
### phased_copy_number_25kb
ESAD75_SCNV25=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2_25k
mkdir -p ${ESAD75_SCNV25}/phased_copy_number_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
    x=$((2/r))
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        mkdir -p ${ESAD75_SCNV25}/phased_copy_number_25kb/${output_id}
        # prefix
        haplotype_phase=${ESAD75_SCNV25}/Allelic_depth_phasing/${participant_id}-hap
        copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb/${output_id}
        phased_copy_number_25kb=${ESAD75_SCNV25}/phased_copy_number_25kb/${output_id}/${output_id}
        # haplotype phase
        > ${phased_copy_number_25kb}.haplotype.25kb.stderr.log
        output_name=${output_id/${participant_id}-/}
        cat ${haplotype_phase}_ADcorrected.txt | \
         selcols.py chr,pos,hap,${output_name} | \
         sed '2,$s#^chr##g' | \
         merge_2file.R -a - -b ${copy_number_25kb}.allelic_CN.25kb.tsv \
          -x 1,2 -y 1,2 -J > ${phased_copy_number_25kb}.haplotype.25kb.tsv && \
        cat ${phased_copy_number_25kb}.haplotype.25kb.tsv  | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print "CONTIG\tSTART\tEND\tPH1_CN\tPH2_CN"}\
          FNR>1{if($3==1){h1=$6;h2=$7};if($3==-1){h1=$7;h2=$6};\
          print $1,$2,$5,h1,h2}' > ${phased_copy_number_25kb}.joint_haplotype.25kb.CN.tsv 2>> ${phased_copy_number_25kb}.haplotype.25kb.stderr.log && \
        cat  ${phased_copy_number_25kb}.haplotype.25kb.tsv | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print "CONTIG\tSTART\tEND\tPH1_CN\tPH2_CN"}\
          FNR>1{if($4==1){h1=$6;h2=$7};if($4==-1){h1=$7;h2=$6};\
          print $1,$2,$5,h1,h2}' > ${phased_copy_number_25kb}.individual_haplotype.25kb.CN.tsv 2>> ${phased_copy_number_25kb}.haplotype.25kb.stderr.log
        # plotCN
        for i in {{1..22},X};do
            ((p=p%15)); ((p++==0)) && wait
            a=",5"
            [[ (${i} == X) && (${x} == 1) ]] && a=""
            cat ${phased_copy_number_25kb}.joint_haplotype.25kb.CN.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1||$1==i{print}' | \
             cut -f 1-4${a} > ${phased_copy_number_25kb}.chr${i}.joint_haplotype.25kb.CN.tsv && \
            cat ${phased_copy_number_25kb}.individual_haplotype.25kb.CN.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1||$1==i{print}' | \
             cut -f 1-4${a} > ${phased_copy_number_25kb}.chr${i}.individual_haplotype.25kb.CN.tsv
            plotCN.R -s ${output_id} -g ${i} \
             --dots_shape "circle filled" --th_nbin 9 \
             -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
             -b ${ref_hg19}/cytoBand.txt \
             -o ${phased_copy_number_25kb}.chr${i}.joint_haplotype.25kb.plot \
             ${phased_copy_number_25kb}.chr${i}.joint_haplotype.25kb.CN.tsv &>> ${phased_copy_number_25kb}.haplotype.25kb.stderr.log && \
            plotCN.R -s ${output_id} -g ${i} \
             --dots_shape "circle filled" --th_nbin 9 \
             -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
             -b ${ref_hg19}/cytoBand.txt \
             -o ${phased_copy_number_25kb}.chr${i}.individual_haplotype.25kb.plot \
             ${phased_copy_number_25kb}.chr${i}.individual_haplotype.25kb.CN.tsv &>> ${phased_copy_number_25kb}.haplotype.25kb.stderr.log && \
            rm -f ${phased_copy_number_25kb}.chr${i}.joint_haplotype.25kb.CN.tsv && \
            rm -f ${phased_copy_number_25kb}.chr${i}.individual_haplotype.25kb.CN.tsv &
        done
        wait $!
        rm -f ${phased_copy_number_25kb}.haplotype.25kb.tsv && \
        rm -f ${phased_copy_number_25kb}.joint_haplotype.25kb.CN.tsv && \
        rm -f ${phased_copy_number_25kb}.individual_haplotype.25kb.CN.tsv &
    done
done
### corrected_copy_number_25kb
# use the final haplotype to correct the haplotype color of individual haplotype
mkdir -p ${ESAD75_SCNV25}/corrected_copy_number_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
    x=$((2/r))
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        mkdir -p ${ESAD75_SCNV25}/corrected_copy_number_25kb/${output_id}
        # prefix
        haplotype_phase=${ESAD75_SCNV25}/Allelic_depth_phasing/${participant_id}-hap
        final_haplotype_phase=${ESAD75_SCNV25}/Allelic_depth_phasing/${participant_id}-finalHap
        copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb/${output_id}
        corrected_copy_number_25kb=${ESAD75_SCNV25}/corrected_copy_number_25kb/${output_id}/${output_id}
        # haplotype phase
        > ${corrected_copy_number_25kb}.individual_HP.25kb.stderr.log
        output_name=${output_id/${participant_id}-/}
        cat ${haplotype_phase}_ADcorrected.txt | \
         selcols.py chr,pos,${output_name} | \
         merge_2file.R -a - -b ${final_haplotype_phase}.txt -x 1,2 -y 1,2 -J | \
         awk -F "\t" -v OFS="\t" 'FNR==1||$4!="NA"{print}' | \
         datatable.R - -e "d[, .(chr_hap=sum(${output_name}*hap)), by=.(chr)]" | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print}\
          FNR>1{h=$2/sqrt($2^2);print $1,h}' > ${corrected_copy_number_25kb}.chr_hap.25kb.tsv && \
        cat ${haplotype_phase}_ADcorrected.txt | \
         selcols.py chr,pos,${output_name} | \
         merge_2file.R -a - -b ${corrected_copy_number_25kb}.chr_hap.25kb.tsv | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print $1,$2,$3}\
          FNR>1{print $1,$2,$3*$4}' | \
         sed '2,$s#^chr##g' | \
         merge_2file.R -a - -b ${copy_number_25kb}.allelic_CN.25kb.tsv \
          -x 1,2 -y 1,2 -J | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print "CONTIG\tSTART\tEND\tPH1_CN\tPH2_CN"}\
          FNR>1{if($3==1){h1=$5;h2=$6};if($3==-1){h1=$6;h2=$5};\
          print $1,$2,$4,h1,h2}' > ${corrected_copy_number_25kb}.individual_HP.25kb.tsv 2>> ${corrected_copy_number_25kb}.haplotype.25kb.stderr.log
        # plotCN
        for i in {{1..22},X};do
            ((p=p%15)); ((p++==0)) && wait
            a=",5"
            [[ (${i} == X) && (${x} == 1) ]] && a=""
            cat ${corrected_copy_number_25kb}.individual_HP.25kb.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1||$1==i{print}' | \
             cut -f 1-4${a} > ${corrected_copy_number_25kb}.chr${i}.individual_HP.25kb.tsv && \
            plotCN.R -s ${output_id} -g ${i} \
             --dots_shape "circle filled" --ylab "" \
             --th_nbin 9 --dots_size 1 -m "NA" \
             -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
             -b ${ref_hg19}/cytoBand.txt \
             -o ${corrected_copy_number_25kb}.chr${i}.individual_HP.25kb.plot \
             ${corrected_copy_number_25kb}.chr${i}.individual_HP.25kb.tsv &>> ${corrected_copy_number_25kb}.haplotype.25kb.stderr.log && \
            rm -f ${corrected_copy_number_25kb}.chr${i}.individual_HP.25kb.tsv &
        done
        wait $!
        rm -f ${phased_copy_number_25kb}.individual_HP.25kb.CN.tsv &
    done
done
### corrected_copy_number_25kb_png
mkdir -p ${ESAD75_SCNV25}/corrected_copy_number_25kb_png
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    echo ${participant_id}
    for i in {{1..22},X};do
        ((p=p%15)); ((p++==0)) && wait
        corrected_copy_number_25kb_png=${ESAD75_SCNV25}/corrected_copy_number_25kb_png/${participant_id}
        cat ${ESAD75_FCMeta}/WGS_EAC.sample__Sample_ID.ordered.tsv | \
         awk -F "\t" -v p="${participant_id}" '{split($1,a,"-");\
          if(p==a[1]"-"a[2]){print $1"/"$1}}' | \
         sed "s#^#${ESAD75_SCNV25}/corrected_copy_number_25kb/#" | \
         sed "s#\$#.chr${i}.individual_HP.25kb.plot.scatter.pdf#" > ${corrected_copy_number_25kb_png}.chr${i}.individual_HP.25kb.scatter.tsv && \
        convert -density 150 @${corrected_copy_number_25kb_png}.chr${i}.individual_HP.25kb.scatter.tsv \
         -trim -bordercolor none -border 5 ${corrected_copy_number_25kb_png}-%02d.chr${i}.individual_HP.25kb.scatter.png && \
        convert ${corrected_copy_number_25kb_png}-*.chr${i}.individual_HP.25kb.scatter.png \
         -append ${corrected_copy_number_25kb_png}.chr${i}.individual_HP.25kb.scatter.png && \
        rm -f ${corrected_copy_number_25kb_png}.chr${i}.individual_HP.25kb.scatter.tsv && \
        rm -rf ${corrected_copy_number_25kb_png}-*.chr${i}.individual_HP.25kb.scatter.png &
    done
    wait $!
done
### final_copy_number_25kb
mkdir -p ${ESAD75_SCNV25}/final_copy_number_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
    x=$((2/r))
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        mkdir -p ${ESAD75_SCNV25}/final_copy_number_25kb/${output_id}
        # prefix
        final_haplotype_phase=${ESAD75_SCNV25}/Allelic_depth_phasing/${participant_id}-finalHap
        copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb/${output_id}
        structural_variation=${ESAD75_SCNV5}_25k/allelic_counts_tumor_curated__filtered1ac_SV/${output_id}
        final_copy_number_25kb=${ESAD75_SCNV25}/final_copy_number_25kb/${output_id}/${output_id}
        # haplotype phase
        > ${final_copy_number_25kb}.final_haplotype.25kb.stderr.log
        cat ${final_haplotype_phase}.txt | dos2unix | \
         sed '2,$s#^chr##g;' | cut -f 1-3 | \
         merge_2file.R -a - -b ${copy_number_25kb}.allelic_CN.25kb.tsv \
          -x 1,2 -y 1,2 -J | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print "CONTIG\tSTART\tEND\tPH1_CN\tPH2_CN"}\
          FNR>1{if($3==1){h1=$5;h2=$6};if($3==-1){h1=$6;h2=$5};\
          print $1,$2,$4,h1,h2}' > ${final_copy_number_25kb}.final_haplotype.25kb.CN.tsv 2>> ${final_copy_number_25kb}.final_haplotype.25kb.stderr.log && \
        # plotCN
        for i in {{1..22},X};do
            ((p=p%15)); ((p++==0)) && wait
            a=",5"
            [[ (${i} == X) && (${x} == 1) ]] && a=""
            cat ${final_copy_number_25kb}.final_haplotype.25kb.CN.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1||$1==i{print}' | \
             cut -f 1-4${a} > ${final_copy_number_25kb}.chr${i}.final_haplotype.25kb.CN.tsv && \
            plotCN.R -s ${output_id} -g ${i} \
             --dots_shape "circle filled" --ylab "" \
             --th_nbin 9 --dots_size 1 -m "NA" \
             -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
             -b ${ref_hg19}/cytoBand.txt \
             -o ${final_copy_number_25kb}.chr${i}.final_haplotype.25kb.plot \
             ${final_copy_number_25kb}.chr${i}.final_haplotype.25kb.CN.tsv &>> ${final_copy_number_25kb}.final_haplotype.25kb.stderr.log && \
            rm -f ${final_copy_number_25kb}.chr${i}.final_haplotype.25kb.CN.tsv &
        done
        wait $!
    done
done
### final_copy_number_25kb_png
mkdir -p ${ESAD75_SCNV25}/final_copy_number_25kb_png
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    echo ${participant_id}
    for i in {{1..22},X};do
        ((p=p%15)); ((p++==0)) && wait
        final_copy_number_25kb_png=${ESAD75_SCNV25}/final_copy_number_25kb_png/${participant_id}
        cat ${ESAD75_FCMeta}/WGS_EAC.sample__Sample_ID.ordered.tsv | \
         awk -F "\t" -v p="${participant_id}" '{split($1,a,"-");\
          if(p==a[1]"-"a[2]){print $1"/"$1}}' | \
         sed "s#^#${ESAD75_SCNV25}/final_copy_number_25kb/#" | \
         sed "s#\$#.chr${i}.final_haplotype.25kb.plot.scatter.pdf#" > ${final_copy_number_25kb_png}.chr${i}.final_haplotype.25kb.scatter.tsv && \
        convert -density 150 @${final_copy_number_25kb_png}.chr${i}.final_haplotype.25kb.scatter.tsv \
         -trim -bordercolor none -border 5 ${final_copy_number_25kb_png}-%02d.chr${i}.final_haplotype.25kb.scatter.png && \
        convert ${final_copy_number_25kb_png}-*.chr${i}.final_haplotype.25kb.scatter.png \
         -append ${final_copy_number_25kb_png}.chr${i}.final_haplotype.25kb.scatter.png && \
        rm -f ${final_copy_number_25kb_png}.chr${i}.final_haplotype.25kb.scatter.tsv && \
        rm -rf ${final_copy_number_25kb_png}-*.chr${i}.final_haplotype.25kb.scatter.png &
    done
    wait $!
done
### final_allelic_fraction
mkdir -p ${ESAD75_SCNV25}/final_allelic_fraction
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%2)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        # prefiex
        allelic_fraction=${ESAD75_SCNV25}/allelic_fraction/${output_id}
        final_haplotype_phase=${ESAD75_SCNV25}/Allelic_depth_phasing/${participant_id}-finalHap
        copy_number_25kb=${ESAD75_SCNV25}/allelic_copy_number_25kb/${output_id}
        final_allelic_fraction=${ESAD75_SCNV25}/final_allelic_fraction/${output_id}
        # convert allelic_fraction.tsv to bed
        cat ${allelic_fraction}.allelic_fraction.tsv | \
         awk -F "\t" -v OFS="\t" 'FNR>1{print $1,$2-1,$2,$7}' | \
         sort -k1,1 -k2,2n > ${final_allelic_fraction}.allelic_fraction.bed && \
        # correct allelic fraction
        cat ${final_haplotype_phase}.txt | \
         sed '2,$s#^chr##g' | \
         merge_2file.R -a - -b ${copy_number_25kb}.allelic_CN.25kb.tsv -x 1,2 -y 1,2 -J | \
         awk -F "\t" -v OFS="\t" 'FNR>1{print $1,$2-1,$4,$3}' | \
         bedtools intersect -a stdin \
          -b ${final_allelic_fraction}.allelic_fraction.bed -wao | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG\tPOSITION\tAF"}\
          {if($4==1){f=$8};if($4==-1){f=1-$8};\
          print $1,$7,f}' | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print}\
          FNR>1&&$3<=1&&$3>=0{print}' > ${final_allelic_fraction}.final_AF.tsv && \
        rm -rf ${final_allelic_fraction}.allelic_fraction.bed &
    done
done
### absolute_copy_number_25kb
mkdir -p ${ESAD75_SCNV25}/absolute_copy_number_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]}
        echo ${output_id}
        a=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $2}'`
        t=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $3}'`
        [[ ${a} = "NA" ]] && a=1
        r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
        x=$((2/r))
        final_allelic_fraction=${ESAD75_SCNV25}/final_allelic_fraction/${output_id}
        copy_ratio_25kb=${ESAD75_SCNV25}/denoised_copy_ratios_tumor_1to22X/${output_id}
        absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
        ACN_CN.R -e ${final_allelic_fraction}.final_AF.tsv -x ${x} -u ${a} -l ${t} \
         ${copy_ratio_25kb}.denoisedCR.tsv > ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv && \
        [[ ${x} = 1 ]] && \
         cat ${copy_ratio_25kb}.denoisedCR.tsv | \
          awk -F "\t" -v OFS="\t" '$1=="CONTIG"||$1=="X"' | \
          ACN_CN.R -x ${x}  -u ${a} -l ${t} - | \
          awk -F "\t" -v OFS="\t" 'FNR>1{print $1,$2,$3,$4,"NA","NA","NA"}' >> ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv
    done
done
### absolute_copy_number_25kb
cat ${ESAD75_SCNV25}/absolute_copy_number_25kb/*.absolute_CN.25kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE",$0}' > ${ESAD75_SCNV25}/absolute_copy_number_25kb/EAC_WGS.absolute_CN.25kb.tsv
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]}
         absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
         cat ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv | \
          awk -F "\t" -v OFS="\t" -v s="${output_id}" 'FNR>1{print s,$0}' >> ${ESAD75_SCNV25}/absolute_copy_number_25kb/EAC_WGS.absolute_CN.25kb.tsv
    done
done
### final_segmentation_25kb
mkdir -p ${ESAD75_SCNV25}/final_segmentation_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%2)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        # prefix
        absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
        final_segmentation_25kb=${ESAD75_SCNV25}/final_segmentation_25kb/${output_id}
        # haplotype phase
        > ${final_segmentation_25kb}.final_segmentation.25kb.stderr.log
        FCN_seg.R -s ${output_id} \
         -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
         -b ${ref_hg19}/cytoBand.txt \
         ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv > ${final_segmentation_25kb}.final_segmentation.25kb.seg 2>> ${final_segmentation_25kb}.final_segmentation.25kb.stderr.log &
    done
    wait $!
done
cat ${ESAD75_SCNV25}/final_segmentation_25kb/*.final_segmentation.25kb.seg | \
 awk -F "\t" 'FNR==1{print}FNR>1&&$1!="SAMPLE"{print}' > ${ESAD75_SCNV25}/final_segmentation_25kb/WGS_EAC.final_segmentation.25kb.seg
### denoised_copy_ratio_100kb
preprocessed_100kb_bed=${ESAD75_SCNV5}/preprocessed_intervals/hg19.chr22X.100k.preprocessed_intervals.bed
mkdir -p ${ESAD75_SCNV25}/denoised_copy_ratio_100kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%4)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]}
        copy_ratio_25kb=${ESAD75_SCNV25}/denoised_copy_ratios_tumor_1to22X/${output_id}
        copy_ratio_100kb=${ESAD75_SCNV25}/denoised_copy_ratio_100kb/${output_id}
        cat ${copy_ratio_25kb}.denoisedCR.tsv | \
         grep -v ^@ | grep -v ^CONTIG | \
         awk -F "\t" -v OFS="\t" '{$2=$2-1;print $0|"sort -k1,1 -k2,2n"}' | \
         bedtools intersect -a stdin \
         -b ${preprocessed_100kb_bed} -wo | \
         sort -k1,1 -k2,2n | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG.i\tSTART.i\tEND.i\tLOG2_COPY_RATIO\tCONTIG\tSTART\tEND\tov"}!a[$1$2$3]++{$6=$6+1;print}' | \
         datatable.R - -e "d[, .(LOG2_COPY_RATIO=log2(median(2^LOG2_COPY_RATIO))), by=.(CONTIG, START, END)]" > ${copy_ratio_100kb}.denoisedCR_100kb.tsv &
    done
    wait $!
done
### allelic_copy_number_100kb
mkdir -p ${ESAD75_SCNV25}/allelic_copy_number_100kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%2)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        a=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $2}'`
        t=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $3}'`
        [[ ${a} = "NA" ]] && a=1
        r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
        x=$((2/r))
        final_allelic_fraction=${ESAD75_SCNV25}/final_allelic_fraction/${output_id}
        copy_ratio_100kb=${ESAD75_SCNV25}/denoised_copy_ratio_100kb/${output_id}
        copy_number_100kb=${ESAD75_SCNV25}/allelic_copy_number_100kb/${output_id}
        ACN_CN.R -e ${final_allelic_fraction}.final_AF.tsv \
         -u ${a} -l ${t} -x ${x} \
         ${copy_ratio_100kb}.denoisedCR_100kb.tsv > ${copy_number_100kb}.allelic_copy_number_100kb.tsv && \
        [[ ${x} = 1 ]] && \
         cat ${copy_ratio_100kb}.denoisedCR_100kb.tsv | \
          awk -F "\t" -v OFS="\t" '$1=="CONTIG"||$1=="X"' | \
          ACN_CN.R -u ${a} -l ${t} -x ${x} - | \
          awk -F "\t" -v OFS="\t" 'FNR>1{print $1,$2,$3,$4,"NA","NA","NA"}' >> ${copy_number_100kb}.allelic_copy_number_100kb.tsv &
    done
    wait $!
done
### allelic_copy_number_100kb
cat ${ESAD75_SCNV25}/allelic_copy_number_100kb/*.allelic_copy_number_100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE",$0}' > ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]}
         allelic_copy_number_100kb=${ESAD75_SCNV25}/allelic_copy_number_100kb/${output_id}
         cat ${allelic_copy_number_100kb}.allelic_copy_number_100kb.tsv | \
          awk -F "\t" -v OFS="\t" -v s="${output_id}" 'FNR>1{print s,$0}' >> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv
    done
done
### final_copy_number_100kb
mkdir -p ${ESAD75_SCNV25}/final_copy_number_100kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
    x=$((2/r))
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        mkdir -p ${ESAD75_SCNV25}/final_copy_number_100kb/${output_id}
        # prefix
        copy_number_100kb=${ESAD75_SCNV25}/allelic_copy_number_100kb/${output_id}
        final_segmentation_25kb=${ESAD75_SCNV25}/final_segmentation_25kb/${output_id}
        final_copy_number_100kb=${ESAD75_SCNV25}/final_copy_number_100kb/${output_id}/${output_id}
        # haplotype phase
        > ${final_copy_number_100kb}.final_haplotype.100kb.stderr.log
        # plotCN
        for i in {{1..22},X};do
            ((p=p%15)); ((p++==0)) && wait
            a=",5"
            [[ (${i} == X) && (${x} == 1) ]] && a=""
            cat ${copy_number_100kb}.allelic_copy_number_100kb.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1||$1==i{print}' | \
             sed 's#CN_A#PH1_CN#g;s#CN_B#PH2_CN#g' | \
             cut -f 1-4${a} > ${final_copy_number_100kb}.chr${i}.final_haplotype.100kb.CN.tsv && \
            plotCN.R -s ${output_id} -g ${i} \
             --dots_shape "circle filled" --ylab "" --ymin -0.5 \
             --th_nbin 9 --dots_size 2 \
             -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
             -b ${ref_hg19}/cytoBand.txt \
             -m ${final_segmentation_25kb}.final_segmentation.25kb.seg \
             -o ${final_copy_number_100kb}.chr${i}.final_haplotype.100kb.plot \
             ${final_copy_number_100kb}.chr${i}.final_haplotype.100kb.CN.tsv &>> ${final_copy_number_100kb}.final_haplotype.100kb.stderr.log && \
            rm -f ${final_copy_number_100kb}.chr${i}.final_haplotype.100kb.CN.tsv &
        done
        wait $!
    done
done
### circos_copy_number_25kb
mkdir -p ${ESAD75_SCNV25}/circos_copy_number_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%2)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]}
        absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
        circos_copy_number_25kb=${ESAD75_SCNV25}/circos_copy_number_25kb/${output_id}.circos_CN
        cat ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv | \
         tail -n +2 | sort -k1,1 -k2,2n | \
         awk -F "\t" -v OFS="\t" '{print "hs"$1,$2,$3,$4}' > ${circos_copy_number_25kb}.PH1.25kb.tsv 2> ${circos_copy_number_25kb}.25kb.stderr.log && \
        cat ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv | \
         tail -n +2 | sort -k1,1 -k2,2n | \
         awk -F "\t" -v OFS="\t" '{print "hs"$1,$2,$3,$5}' > ${circos_copy_number_25kb}.PH2.25kb.tsv 2>> ${circos_copy_number_25kb}.25kb.stderr.log &
    done
    wait $!
done
### circos_copy_number_100kb
mkdir -p ${ESAD75_SCNV25}/circos_copy_number_100kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%2)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]}
        copy_number_100kb=${ESAD75_SCNV25}/allelic_copy_number_100kb/${output_id}
        circos_copy_number_100kb=${ESAD75_SCNV25}/circos_copy_number_100kb/${output_id}.circos_CN
        cat ${copy_number_100kb}.allelic_copy_number_100kb.tsv | \
         tail -n +2 | sort -k1,1 -k2,2n | \
         awk -F "\t" -v OFS="\t" '{print "hs"$1,$2,$3,$4}' > ${circos_copy_number_100kb}.PH1.100kb.tsv 2> ${circos_copy_number_100kb}.100kb.stderr.log && \
        cat ${copy_number_100kb}.allelic_copy_number_100kb.tsv | \
         tail -n +2 | sort -k1,1 -k2,2n | \
         awk -F "\t" -v OFS="\t" '{print "hs"$1,$2,$3,$5}' > ${circos_copy_number_100kb}.PH2.100kb.tsv 2>> ${circos_copy_number_100kb}.100kb.stderr.log &
    done
    wait $!
done
### allelic_depth_contour_25kb
mkdir -p ${ESAD75_SCNV25}/allelic_depth_contour_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        mkdir -p ${ESAD75_SCNV25}/allelic_depth_contour_25kb/${output_id}
        a=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $2}'`
        t=`cat ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | awk -F "\t" -v o="${output_id}" '$1==o{print $3}'`
        [[ ${a} = "NA" ]] && a=1
        # prefix
        allelic_fraction=${ESAD75_SCNV25}/allelic_fraction/${output_id}
        copy_ratio_25kb=${ESAD75_SCNV25}/denoised_copy_ratios_tumor_1to22X/${output_id}
        allelic_depth_contour_25kb=${ESAD75_SCNV25}/allelic_depth_contour_25kb/${output_id}.uncorrected_copy_number_contour  
        allelic_depth_contour_25kb_chr=${ESAD75_SCNV25}/allelic_depth_contour_25kb/${output_id}/${output_id}.uncorrected_copy_number_contour
        > ${allelic_depth_contour_25kb_chr}.25kb.log
        # allelic copy ratio for whole genome
        cat ${copy_ratio_25kb}.denoisedCR.tsv | \
         grep -v ^@ | awk -F "\t" -v OFS="\t" '(FNR==1)||($1!="X")' | \
         ACN_CN.R -e ${allelic_fraction}.allelic_fraction.tsv \
          - > ${allelic_depth_contour_25kb_chr}.25kb.tsv 2> ${allelic_depth_contour_25kb_chr}.25kb.log && \
         CN_contour.R -u ${a} -l ${t} \
          -o ${allelic_depth_contour_25kb}.25kb \
          ${allelic_depth_contour_25kb_chr}.25kb.tsv &>> ${allelic_depth_contour_25kb_chr}.25kb.log && \
        # allelic copy ratio for each chromosome
        for i in {1..22};do
            ((p=p%15)); ((p++==0)) && wait
            cat ${allelic_depth_contour_25kb_chr}.25kb.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1{print}$1==i{print}' | \
             CN_contour.R -u ${a} -l ${t} \
              -o ${allelic_depth_contour_25kb_chr}.chr${i}.25kb \
              - &>> ${allelic_depth_contour_25kb_chr}.25kb.log &
        done
        wait $!
    done
done
## final_structural_variantion
hg19_dict=${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict
hg19_fai=${ref_hg19}/Homo_sapiens_assembly19.fasta.fai
BN10_SV=${ESAD75}/SvABA_ms
mkdir -p ${ESAD75_SCNV25}/final_structural_variantion/
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    > ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.list
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        final_segmentation_25kb=${ESAD75_SCNV25}/final_segmentation_25kb/${output_id}
        absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
        svaba_refined_sv=${ESAD75_SV}/svaba_refined_sv/${participant_id}.svaba_refined.sv
        final_structural_variantion=${ESAD75_SCNV25}/final_structural_variantion/${output_id}.final_sv
        > ${final_structural_variantion}.stderr.log
        ### CN bed
        cat ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv | cut -f 1-5 | \
         datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
          variable.name = 'PH', value.name = 'CN')" | \
         awk -F "\t" -v OFS="\t" 'FNR>1{sub("_CN","",$4);$2=$2-1;print}' | \
         sort -k 1,1 -k 2,2n | uniq > ${final_structural_variantion}.absolute_CN.25kb.bed 2>> ${final_structural_variantion}.stderr.log && \
        ### CN breakpoint
        cat ${final_segmentation_25kb}.final_segmentation.25kb.seg | \
         awk -F "\t" -v OFS="\t" 'FNR>1{split($1,a,".");p2=a[2];\
          if((p1==p2)&&($2==c)){s1=e-200000;if(s1<0){s1=0};s2=$3+200000;\
           i1=p1"|"c":"e;i2=p1"|"c":"$3;\
           print c,s1,e,i1"\n"c,$3,s2,i1"\n"c,s1,e,i2"\n"c,$3,s2,i2};\
          p1=p2;c=$2;e=$4}' | \
         bedtools intersect -a stdin \
          -b ${final_structural_variantion}.absolute_CN.25kb.bed -wo | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG\tSTART\tEND\tID\tPH\tCN"}\
          {split($4,a,"|");split(a[2],b,":");\
          if(a[1]==$8){sub(".*\\|","",$4);print $1,$2,$3,$4,$8,$9}}' | \
         datatable.R - -e "d=d[, .(MEAN_CN = mean(CN)), \
          by = .(CONTIG,START,END,ID,PH)]" | \
         datatable.R - -e "d[, c('ID_1', 'ID_2') := tstrsplit(ID, ':', fixed=TRUE)]; \
          d[, ID_2 := as.numeric(ID_2)]; \
          d[, FLANKING_REGION := ifelse((ID_1==CONTIG)&(ID_2>=END),'FLANKING_L','FLANKING_R')]; \
          d=dcast(data=d, ID + PH ~ FLANKING_REGION, value.var = 'MEAN_CN'); \
          d[, FLANKING_diff := abs(FLANKING_L-FLANKING_R)];\
          d=d[FLANKING_diff>=0.5, .(ID, PH, FLANKING_diff)];\
          if(nrow(d)==0) d=rbind(d,data.table(ID='NC_007605:1',PH=NA,FLANKING_diff=NA));\
          d[, c('ID_1', 'ID_2') := tstrsplit(ID, ':', fixed=TRUE)];\
          d=d[, .(ID_1, ID_2)]" | \
         awk -F "\t" -v OFS="\t" 'FNR>1{print $1,$2-1,$2}' | \
         sort -k1,1 -k2,2n | \
         bedtools slop -g ${hg19_fai} -i stdin -b 100000 | \
         bedtools merge -i stdin > ${final_structural_variantion}.CN_bkps.100kb.bed 2>> ${final_structural_variantion}.stderr.log  && \
        # SV breakpoints (Bkp1,Bkp2) both within 100kb of filtered CN breakpoints
        zcat ${svaba_refined_sv}.vcf.gz | \
         bcftools view -T ${final_structural_variantion}.CN_bkps.100kb.bed | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "ID_1\tID_2\tN"} \
          $1!~/^#/{split($3,a,":");print "ID_a"a[1],"ID_a"a[2],1}' | \
         datatable.R - -e "if(nrow(d)==0) d=rbind(d,data.table(ID_1=NA,ID_2=c('ID_a1','ID_a2'),N=NA));\
          d=dcast(data=d, ID_1 ~ ID_2, value.var = 'N');\
          if(sum(grepl('ID_a2',colnames(d)))==0) d[['ID_a2']]=NA;\
          d=d[(ID_a1+ID_a2)==2]" | \
         awk -F "\t" -v OFS="\t" 'FNR>1{sub("ID_a","",$1);print $1":1\n"$1":2"}' | \
         sort > ${final_structural_variantion}.ID.list 2>> ${final_structural_variantion}.stderr.log
        [[ ! -s ${final_structural_variantion}.ID.list ]] && \
         rm -rf ${final_structural_variantion}.CN_bkps.100kb.bed && \
         rm -rf ${final_structural_variantion}.absolute_CN.25kb.bed && \
         rm -rf ${final_structural_variantion}.ID.list && \
         continue
        zcat ${svaba_refined_sv}.vcf.gz | \
         bcftools filter -i "ID=@${final_structural_variantion}.ID.list" | \
         bcftools view -s ${output_id} | \
         bcftools view -i 'FORMAT/AD[0]>0' | \
         bcftools view -Oz > ${final_structural_variantion}.vcf.gz 2>> ${final_structural_variantion}.stderr.log && \
        bcftools index -t ${final_structural_variantion}.vcf.gz && \
        echo ${final_structural_variantion}.vcf.gz >> ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.list && \
        vcf2bkps.R -p -o ${final_structural_variantion}.bkps.tsv \
         ${final_structural_variantion}.vcf.gz &>> ${final_structural_variantion}.stderr.log && \
        rm -rf ${final_structural_variantion}.CN_bkps.100kb.bed && \
        rm -rf ${final_structural_variantion}.absolute_CN.25kb.bed && \
        rm -rf ${final_structural_variantion}.ID.list
    done
    [[ ! -s ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.list ]] && \
     rm -rf ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.list && \
     continue
    bcftools merge -l ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.list | \
     bcftools view -Oz > ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.gz && \
    cat ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.list | xargs rm && \
    rm -rf ${ESAD75_SCNV25}/final_structural_variantion/${participant_id}.final_sv.vcf.list
done
### final_copy_number_SV_25kb
mkdir -p ${ESAD75_SCNV25}/final_copy_number_SV_25kb
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    r=`cat ${ESAD75_FCMeta}/sample__read_ratio_ax_25k.Oct032019.tsv | awk -F "\t" -v p="${participant_id}" '$1~/-Normal-/&&$2==p{printf "%.0f\n", $4}'`
    x=$((2/r))
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        mkdir -p ${ESAD75_SCNV25}/final_copy_number_SV_25kb/${output_id}
        # prefix
        final_structural_variantion=${ESAD75_SCNV25}/final_structural_variantion/${output_id}.final_sv
        absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
        final_segmentation_25kb=${ESAD75_SCNV25}/final_segmentation_25kb/${output_id}
        final_copy_number_SV_25kb=${ESAD75_SCNV25}/final_copy_number_SV_25kb/${output_id}/${output_id}
        # haplotype phase
        > ${final_copy_number_SV_25kb}.final_CN_SV.25kb.stderr.log
        # plotCN
        for i in {{1..22},X};do
            ((p=p%15)); ((p++==0)) && wait
            a=",5"
            [[ (${i} == X) && (${x} == 1) ]] && a=""
            cat ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv | \
             awk -F "\t" -v OFS="\t" -v i="${i}" 'FNR==1||$1==i{print}' | \
             cut -f 1-4${a} > ${final_copy_number_SV_25kb}.chr${i}.final_CN_SV.25kb.CN.tsv && \
            plotCN.R -s ${output_id} -g ${i} \
             --dots_shape "circle filled" --ylab "" --ymin -0.5 \
             --th_nbin 9 --dots_size 1 \
             -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
             -b ${ref_hg19}/cytoBand.txt \
             -m ${final_segmentation_25kb}.final_segmentation.25kb.seg \
             -n ${final_structural_variantion}.bkps.tsv \
             -o ${final_copy_number_SV_25kb}.chr${i}.final_CN_SV.25kb.plot \
             ${final_copy_number_SV_25kb}.chr${i}.final_CN_SV.25kb.CN.tsv &>> ${final_copy_number_SV_25kb}.final_CN_SV.25kb.stderr.log && \
            rm -f ${final_copy_number_SV_25kb}.chr${i}.final_CN_SV.25kb.CN.tsv &
        done
        wait $!
    done
done
### final_copy_number_SV_25kb_png
mkdir -p ${ESAD75_SCNV25}/final_copy_number_SV_25kb_png
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    echo ${participant_id}
    for i in {{1..22},X};do
        ((p=p%15)); ((p++==0)) && wait
        final_copy_number_SV_25kb_png=${ESAD75_SCNV25}/final_copy_number_SV_25kb_png/${participant_id}
        cat ${ESAD75_FCMeta}/WGS_EAC.sample__Sample_ID.ordered.tsv | \
         awk -F "\t" -v p="${participant_id}" '{split($1,a,"-");\
          if(p==a[1]"-"a[2]){print $1"/"$1}}' | \
         sed "s#^#${ESAD75_SCNV25}/final_copy_number_SV_25kb/#" | \
         sed "s#\$#.chr${i}.final_CN_SV.25kb.plot.scatter.pdf#" > ${final_copy_number_SV_25kb_png}.chr${i}.final_CN_SV.25kb.scatter.tsv && \
        convert -density 150 @${final_copy_number_SV_25kb_png}.chr${i}.final_CN_SV.25kb.scatter.tsv \
         -trim -bordercolor none -border 5 ${final_copy_number_SV_25kb_png}-%02d.chr${i}.final_CN_SV.25kb.scatter.png && \
        convert ${final_copy_number_SV_25kb_png}-*.chr${i}.final_CN_SV.25kb.scatter.png \
         -append ${final_copy_number_SV_25kb_png}.chr${i}.final_CN_SV.25kb.scatter.png && \
        rm -f ${final_copy_number_SV_25kb_png}.chr${i}.final_CN_SV.25kb.scatter.tsv && \
        rm -rf ${final_copy_number_SV_25kb_png}-*.chr${i}.final_CN_SV.25kb.scatter.png &
    done
    wait $!
done
### final_copy_number_bkps
hg19_fai=${ref_hg19}/Homo_sapiens_assembly19.fasta.fai
mkdir -p ${ESAD75_SCNV25}/final_copy_number_bkps/
echo -e "sample_id\tN_bkps" > ${ESAD75_SCNV25}/final_copy_number_bkps/WGS_EAC.all.bkps.tsv
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%15)); ((p++==0)) && wait
        c=(${so_t});output_id=${c[4]};echo ${output_id}
        final_segmentation_25kb=${ESAD75_SCNV25}/final_segmentation_25kb/${output_id}
        absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
        final_copy_number_bkps=${ESAD75_SCNV25}/final_copy_number_bkps/${output_id}.final_bkps
        > ${final_copy_number_bkps}.stderr.log
        ### CN bed
        cat ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv | cut -f 1-5 | \
         datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
          variable.name = 'PH', value.name = 'CN')" | \
         awk -F "\t" -v OFS="\t" 'FNR>1{sub("_CN","",$4);$2=$2-1;print}' | \
         sort -k 1,1 -k 2,2n | uniq > ${final_copy_number_bkps}.absolute_CN.25kb.bed 2>> ${final_copy_number_bkps}.stderr.log && \
        ### CN breakpoint
        cat ${final_segmentation_25kb}.final_segmentation.25kb.seg | \
         awk -F "\t" -v OFS="\t" 'FNR>1{split($1,a,".");p2=a[2];\
          if((p1==p2)&&($2==c)){s1=e-200000;if(s1<0){s1=0};s2=$3+200000;\
           i1=p1"|"c":"e;i2=p1"|"c":"$3;\
           print c,s1,e,i1"\n"c,$3,s2,i1"\n"c,s1,e,i2"\n"c,$3,s2,i2};\
          p1=p2;c=$2;e=$4}' | \
         bedtools intersect -a stdin \
          -b ${final_copy_number_bkps}.absolute_CN.25kb.bed -wo | \
         awk -F "\t" -v OFS="\t" 'BEGIN{print "CONTIG\tSTART\tEND\tID\tPH\tCN"}\
          {split($4,a,"|");split(a[2],b,":");\
          if(a[1]==$8){sub(".*\\|","",$4);print $1,$2,$3,$4,$8,$9}}' | \
         datatable.R - -e "d=d[, .(MEAN_CN = mean(CN)), \
          by = .(CONTIG,START,END,ID,PH)]" | \
         datatable.R - -e "d[, c('ID_1', 'ID_2') := tstrsplit(ID, ':', fixed=TRUE)]; \
          d[, ID_2 := as.numeric(ID_2)]; \
          d[, FLANKING_REGION := ifelse((ID_1==CONTIG)&(ID_2>=END),'FLANKING_L','FLANKING_R')]; \
          d=dcast(data=d, ID + PH ~ FLANKING_REGION, value.var = 'MEAN_CN'); \
          d[, FLANKING_diff := abs(FLANKING_L-FLANKING_R)];\
          d=d[FLANKING_diff>=0.5, .(ID, PH, FLANKING_diff)];\
          if(nrow(d)==0) d=rbind(d,data.table(ID='NC_007605:1',PH=NA,FLANKING_diff=NA));\
          d[, c('ID_1', 'ID_2') := tstrsplit(ID, ':', fixed=TRUE)];\
          d=d[, .(ID_1, ID_2)]" | \
         awk -F "\t" -v OFS="\t" 'FNR>1{print $1,$2-1,$2}' | \
         sort -k1,1 -k2,2n | \
         bedtools slop -g ${hg19_fai} -i stdin -b 100000 | \
         bedtools merge -i stdin > ${final_copy_number_bkps}.25kb.bed 2>> ${final_copy_number_bkps}.stderr.log && \
         cat ${final_copy_number_bkps}.25kb.bed | \
          wc -l | sed "s#^#${output_id}\t#g" >> ${ESAD75_SCNV25}/final_copy_number_bkps/WGS_EAC.all.bkps.tsv && \
         rm -rf ${final_copy_number_bkps}.absolute_CN.25kb.bed &
    done
done

## Manually_curated_SV
absolute_copy_number_25kb=${ESAD75_SCNV25}/absolute_copy_number_25kb/${output_id}
final_segmentation_25kb=${ESAD75_SCNV25}/final_segmentation_25kb/${output_id}
final_copy_number_SV_25kb=${ESAD75_SCNV25}/final_copy_number_SV_25kb/${output_id}/${output_id}
### Pt6-chr7
cat ${ESAD75}/SV_evolution/Manually_curated_SV/Pt6-chr7.txt | \
 sed 's#[ \t]\+#\t#g' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "chr1\tpos1\tstr1\tchr2\tpos2\tstr2\tsupporting_reads"}\
  FNR>1{sub("hs","",$1);sub("hs","",$4);print $0,1}' > ${ESAD75}/SV_evolution/Manually_curated_SV/Pt6-chr7.sv.tsv
plotCN.R -s ${output_id} -g 7 \
   --dots_shape "circle filled" --ylab "" --ymin -0.5 \
   --th_nbin 9 --dots_size 1 \
   -d ${ref_hg19}/Homo_sapiens_assembly19.1_22X.dict \
   -b ${ref_hg19}/cytoBand.txt \
   -m ${final_segmentation_25kb}.final_segmentation.25kb.seg \
   -n ${ESAD75}/SV_evolution/Manually_curated_SV/Pt6-chr7.sv.tsv \
   -o ${ESAD75}/SV_evolution/Manually_curated_SV/${output_id}.chr7.final_CN_SV.25kb.plot \
   ${absolute_copy_number_25kb}.absolute_CN.25kb.tsv  &>> ${final_copy_number_SV_25kb}.final_CN_SV.25kb.stderr.log && \


# CNV pattern
use UGER
ish -l h_vmem=1G -binding linear:4 -pe smp 4

use R-3.4
export R_LIBS="~/lib"


ESAD75_FCMeta=${ESAD75}/Firecloud_metadata
ESAD75_FHMeta=${ESAD75}/Firehose_metadata
BN10_sample=${ESAD75}/Firecloud_metadata/sample_pair.July212018.FC.tsv
BN10_subtype=${ESAD75}/Firecloud_metadata/sample__output_id.subtype_combinded.Feb182019.tsv

BN10_HC=${ESAD75}/HaplotypeCaller
ESAD75_SCNV25=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2_25k

CNV_pattern=${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.pt/WGS_EAC.CNV_pattern
CNV_timing=${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.branch_timing.pt/EAC.CNV_pattern.final.branch_timing

mkdir -p ${ESAD75_SCNV25}/CNV_pattern/

## Generate metadata
### process branched CNVs (add an ancestral CNV for each)
cat ${ESAD75_SCNV25}/CNV_pattern/Table.S2.All.SCNA.txt | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1&&$4!="X"{print $0|"sort -k1,1 -k4,6 -k12,13"}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}$12==0{print}\
  $12==1{print;if(!($13 in a)){$2="SAMPLE";$3="SUBTYPE";a[$13]=$0}}\
  $12~"Pt_"{print;b=a[$12];gsub("SAMPLE",$2,b);gsub("SUBTYPE",$3,b);print b}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1{print $0|"sort -k1,2 -k4,6 -k12,13"}' | \
 uniq > ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.tsv
### generate CNV pattern id
mkdir -p ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.pt/
cat ${BN10_sample} | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   ((p=p%4)); ((p++==0)) && wait
   pt_id=`grep -w ${participant_id/EAC-/} ${ESAD75_FCMeta}/participant2pt_id.tsv | cut -f 2`
   # transpose to a 'cn_pattern X sample_id' matrix for each Pt 
   # In the matrix, 0 reprsents samples w/o specified CNV; 1 reprsents samples w/ specified CNV
   cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.tsv | \
    cut -f 1-2,4- | \
    awk -F "\t" -v OFS="\t" -v p="${pt_id}" 'FNR==1||$1==p{print}' | \
    datatable.R - -e "dcast(data=d, ... ~ sample_id, value.var = 'CN')" | \
    awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{printf $1;\
     for(i=1;i++<11;) printf "\t"$i;
     for(i=11;i++<NF;){if($i=="NA"){printf "\t0"}else{printf "\t1"}};\
     printf "\n"}' > ${CNV_pattern}.${participant_id}.sample.tsv && \
   s_id=`cat ${CNV_pattern}.${participant_id}.sample.tsv | cut -f 12- | head -1 | sed 's#\t#,#g'` && \
   # assign CNV pattern id for each uniq CNV pattern
   cat ${CNV_pattern}.${participant_id}.sample.tsv | cut -f 12- | \
    awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{print $0|"sort | uniq"}' | \
    awk -F "\t" -v OFS="\t" -v p="${participant_id}" 'BEGIN{d=0}\
     FNR==1{print $0,"Pattern_ID"}\
     FNR>1{d++;print $0,p"-cp"d}' | \
    merge_2file.R -a ${CNV_pattern}.${participant_id}.sample.tsv \
     -b - -x ${s_id} -y ${s_id} -J | \
    awk -F "\t" -v OFS="\t" '{print $(NF-1),$NF}' | \
    merge_2file.R -a ${CNV_pattern}.${participant_id}.sample.tsv \
     -b - -x 11 -y 1 -J > ${CNV_pattern}.${participant_id}.tsv && \
   rm -rf ${CNV_pattern}.${participant_id}.sample.tsv &
done
### aggregate CNV pattern for each branch into a final TransPosed table
> ${CNV_pattern}.final.branch.tp.mh.tsv
cat ${BN10_sample} | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   s_id=`head -1 ${CNV_pattern}.${participant_id}.tsv | cut -f 12- | tr '\t' '\n' | head -n -1 | tr '\n' ',' | sed 's#,$##'`
   # remove extra samples shown in the timing table
   cat ${CNV_timing}.${participant_id/EAC-/}.tsv | \
    datatable.R - -e "s=unlist(strsplit('${s_id}',','));\
     s=data.table(sample_id=s,cnv_presents=1);\
     d=melt(data=d, id.vars=c('N_samples','Branch_ID','TP53_timing','WGD_timing','tumor_branch'), \
      variable.name = 'sample_id', value.name = 'cnv_pattern');\
     d=merge(d,s,by='sample_id',all.x=TRUE);\
     p=d[is.na(cnv_presents)&(cnv_pattern!=0),Branch_ID];\
     s=d[is.na(cnv_presents),sample_id];\
     d=d[!(Branch_ID%in%p)];d=d[!(sample_id%in%s)];\
     d=dcast(data=d, N_samples + Branch_ID + TP53_timing + WGD_timing + tumor_branch ~ sample_id, \
      value.var = 'cnv_pattern')" | \
    merge_2file.R -a ${CNV_pattern}.${participant_id}.tsv -b - \
     -x ${s_id} -y ${s_id} -J | \
    datatable.R - -e "d_cn=colnames(d);\
     iv=d_cn[!grepl('EAC-',d_cn)];\
     melt(data=d, id.vars=iv,\
      variable.name = 'sample_id', value.name = 'CN')" >> ${CNV_pattern}.branch.tp.mh.tsv
done
cat ${CNV_pattern}.branch.tp.mh.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1&&$1!="cnv_id"{print $0|"sort -k11"}' > ${CNV_pattern}.branch.tp.tsv
rm ${CNV_pattern}.branch.tp.mh.tsv
### Count bins with SNPs for each branch
SNV_bins=${CNV_pattern}.N_SNV
echo -e "Pattern_ID\tN_bins" > ${SNV_bins}.tsv
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   ((p=p%4)); ((p++==0)) && wait
   s_id=`head -1 ${CNV_pattern}.${participant_id}.tsv | cut -f 12- | tr '\t' '\n' | head -n -2 | tr '\n' ',' | sed 's#,$##'`
   f2t=${BN10_HC}/filtered2_tsv/${participant_id}/${participant_id}.gatk4_HC
   # remove extra samples and related patterns with the extra samples in the SNV pattern table
   cat ${f2t}.shared.patterns.tsv | \
    datatable.R - -e "d[, N_samples:=NULL];\
     s=unlist(strsplit('${s_id}',','));\
     s=data.table(sample_id=s,cnv_presents=1);\
     d=melt(data=d, id.vars=c('Pattern_ID','N_bins'), \
      variable.name = 'sample_id', value.name = 'snv_pattern');\
     d=merge(d,s,by='sample_id',all.x=TRUE);\
     p=d[is.na(cnv_presents)&(snv_pattern!=0),Pattern_ID];\
     s=d[is.na(cnv_presents),sample_id];\
     d=d[!(Pattern_ID%in%p)];d=d[!(sample_id%in%s)];\
     d=dcast(data=d, Pattern_ID + N_bins ~ sample_id, \
      value.var = 'snv_pattern');\
     d[, Pattern_ID:=NULL]" > ${SNV_bins}.${participant_id}.shared.tsv && \
   cat ${f2t}.private.patterns.tsv | \
    datatable.R - -e "d[, N_samples:=NULL];\
     s=unlist(strsplit('${s_id}',','));\
     s=data.table(sample_id=s,cnv_presents=1);\
     d=melt(data=d, id.vars=c('Pattern_ID','N_bins'), \
      variable.name = 'sample_id', value.name = 'snv_pattern');\
     d=merge(d,s,by='sample_id',all.x=TRUE);\
     p=d[is.na(cnv_presents)&(snv_pattern!=0),Pattern_ID];\
     s=d[is.na(cnv_presents),sample_id];\
     d=d[!(Pattern_ID%in%p)];d=d[!(sample_id%in%s)];\
     d=dcast(data=d, Pattern_ID + N_bins ~ sample_id, \
      value.var = 'snv_pattern');\
     d[, Pattern_ID:=NULL]" > ${SNV_bins}.${participant_id}.private.tsv && \
   cat ${CNV_pattern}.${participant_id}.tsv | \
    cut -f 12- | \
    awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{print $0|"sort | uniq"}' | \
    awk -F "\t" -v OFS="\t" 'FNR==1{print}\
     FNR>1{for(i=t=0;i<(NF-1);) t+=$++i;if(t>1){print}}' | \
    merge_2file.R -a - -b ${SNV_bins}.${participant_id}.shared.tsv \
     -x ${s_id} -y ${s_id} -J | \
    datatable.R - -e "d[, .(Pattern_ID, N_bins)]" | \
    sed '1,1d' >> ${SNV_bins}.tsv && \
   cat ${CNV_pattern}.${participant_id}.tsv | \
    cut -f 12- | \
    awk -F "\t" -v OFS="\t" 'FNR==1{print}FNR>1{print $0|"sort | uniq"}' | \
    awk -F "\t" -v OFS="\t" 'FNR==1{print}\
     FNR>1{for(i=t=0;i<(NF-1);) t+=$++i;if(t==1){print}}' | \
    merge_2file.R -a - -b ${SNV_bins}.${participant_id}.private.tsv \
     -x ${s_id} -y ${s_id} -J | \
    datatable.R - -e "d[, .(Pattern_ID, N_bins)]" | \
    sed '1,1d' >> ${SNV_bins}.tsv && \
   rm -rf ${SNV_bins}.${participant_id}.shared.tsv && \
   rm -rf ${SNV_bins}.${participant_id}.private.tsv &
done
### get number of events for each branch
cat ${CNV_pattern}.branch.tp.tsv | \
 awk -F "\t" -v OFS="\t" '!a[$1]++{print}' | cut -f 1,12 | \
 datatable.R - -e "d[, .N, by = .(Pattern_ID)]" | \
 sed '1,1s#N#N_CNV#' > ${CNV_pattern}.N_CNV.tsv
### get number of CNVs and SNVs for each branch
cat ${CNV_pattern}.branch.tp.tsv | \
 awk -F "\t" -v OFS="\t" '!a[$12$14]++{print $12,$14}' | \
 merge_2file.R -a - -b ${CNV_pattern}.N_CNV.tsv | \
 merge_2file.R -a - -b ${CNV_pattern}.N_SNV.tsv | \
 awk -F "\t" -v OFS="\t" '$2!="NA"{print}' > ${CNV_pattern}.N.tsv
### formate branch-level data for Table.S2
cat ${CNV_pattern}.N.tsv | cut -f 2- | \
 merge_2file.R -a ${CNV_pattern}.branch.tp.tsv -b - -x 14 -J | \
 awk -F "\t" -v OFS="\t" '{print $2,$1,$14,$17,$20,$15,$16,$4,$5,$6,$7,$8}' | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{$1="CNV_ID";$5="N_SCNAs";print}\
  FNR>1{print}' > ${CNV_pattern}.branch.S2.tsv

## annotation
### sample_N_events for ordering for CNV_pattern
cat ${CNV_pattern}.branch.tp.tsv | \
 datatable.R - -e "d[, nrow(.SD[CN==1]),\
  by = .(sample_id), .SDcols = 'CN']" | \
 sed '1,1s#V1#sample_CNV#' > ${CNV_pattern}.sample_CNV.tsv
### extract samples with TP53 inactivation (Pt_6 is a patient with intact TP53)
cat ${CNV_pattern}.branch.tp.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1&&$19==1{print $0|"sort -k15,15nr"}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $18,"sample_TP53i"}\
  FNR>1&&!a[$18]++{print $18,$15}' > ${CNV_pattern}.sample_TP53.tsv
### sample_WGD for ordering for CNV_pattern
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1{print $0|"sort -k9,9nr"}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $2,"sample_WGD"}\
  FNR>1&&!a[$2]++{print $2,$9}' > ${CNV_pattern}.sample_WGD.tsv
### CNV pattern with sample_N_events and sample_N_WGD
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.tsv | \
 datatable.R - -e "d[, .N,\
  by = .(variant_classification, sample_id, pt_id, WGD, subtype)]" | \
 sed '1,1s#N$#N_CNV#' | \
 merge_2file.R -a - -b ${CNV_pattern}.sample_CNV.tsv -x 2 -y 1 -J | \
 merge_2file.R -a - -b ${CNV_pattern}.sample_TP53.tsv -J | \
 merge_2file.R -a - -b ${CNV_pattern}.sample_WGD.tsv \
  -J > ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv
### N of CNVs by WGD timing
cat ${CNV_pattern}.branch.S2.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1&&$6==1{if($7==0){$7="pre_WGD"};\
        if($7==1){$7="WGD"};\
        if($7==2){$7="post_WGD"};\
        if($7=="NA"){$7="pre_WGD"};\
        if($12=="deletion"){$12="loss"};\
        if($12=="amp"){$12="gain"};print}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1{sub("4_terminal","4_segmental",$11);\
   sub("5_paracentric","4_segmental",$11);\
   sub("6_pericentric","4_segmental",$11);print}' | \
 datatable.R - -e "d[, .N,\
  by = .(variant_classification, variant_type, WGD_timing)]" | \
 sed '1,1s#N$#N_CNV#' |
 datatable.R - -e "vc=c('1_local', '2_uniparental_disomy', '3_chr_arm', '4_segmental', '7_complex_loss', '8_complex_gain', '9_focal_amp');\
  vt=c('loss', 'LOH', 'gain');\
  wgd=c('pre_WGD', 'WGD', 'post_WGD');\
  d[['variant_classification']]=factor(d[['variant_classification']], levels=vc);\
  d[['variant_type']]=factor(d[['variant_type']], levels=vt);\
  d[['WGD_timing']]=factor(d[['WGD_timing']], levels=wgd);\
  d[order(variant_classification, variant_type, WGD_timing)]" > ${CNV_pattern}.CNV_WGD.N_CNV.tsv
### N of branches by WGD timing
cat ${CNV_pattern}.branch.S2.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $2,$7}\
  FNR>1&&$6==1{if($7==0){$7="pre_WGD"};\
        if($7==1){$7="WGD"};\
        if($7==2){$7="post_WGD"};\
        if($7=="NA"){$7="pre_WGD"};print $2,$7}' | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 datatable.R - -e "d[, .N, by = .(WGD_timing)]" | \
 sed '1,1s#N$#N_Branch#' | \
 datatable.R - -e "wgd=c('pre_WGD', 'WGD', 'post_WGD');\
  d[['WGD_timing']]=factor(d[['WGD_timing']], levels=wgd);\
  d[order(WGD_timing)]" > ${CNV_pattern}.CNV_WGD.N_Branch.tsv
cat ${CNV_pattern}.CNV_WGD.N_CNV.tsv | \
 merge_2file.R -a - -b ${CNV_pattern}.CNV_WGD.N_Branch.tsv -x 3 | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $0,"Normalized_N_CNV"}\
  FNR>1{print $0,$4/$5}' > ${CNV_pattern}.CNV_WGD.N_CNV.normalized.tsv

## Generate plots for CNV pattern
mkdir -p ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.plot
cnv_pattern_plot=${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.plot/WGS_EAC.CNV_pattern
cnv_color=${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.color.tsv
cnv_color_wgd=${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.color.WGD.tsv
### parameters
background_blank="plot.background = element_blank()"
margin_0="plot.margin = margin(0, 0, 0, 0, 'cm')"
margin_0p5="plot.margin = margin(0.5, 0.5, 0.5, 0.5, 'cm')"
margin_1="plot.margin = margin(1, 1, 1, 1, 'cm')"
panel_blank="panel.grid = element_blank(), panel.background = element_blank()"
ticks_0p3="axis.ticks.length = unit(0.3, 'cm')"
text_9="element_text(size = 9, colour = 'black')"
text_9v="element_text(size = 9, colour = 'black', angle = 90, vjust = 0.5, hjust=1)"
text_9a="element_text(size = 9, colour = 'black', angle = 45, hjust=1)"
text_11="element_text(size = 11, colour = 'black')"

gp_theme="theme(${background_blank}, ${ticks_0p3}, \
     axis.title.x = element_blank(), axis.line.x = element_blank(), \
      axis.text.x = ${text_9}, axis.title.y = ${text_11}, axis.text.y = ${text_9}, \
     ${panel_blank})"
gp_theme_xtxt90="theme(${background_blank}, ${ticks_0p3}, \
     axis.title.x = element_blank(), axis.line = element_blank(), \
     axis.text.x = ${text_9v}, axis.title.y = ${text_11}, axis.text.y = ${text_9}, \
     ${margin_0}, ${panel_blank})"
gp_theme_xtxt45="theme(${background_blank}, ${ticks_0p3}, \
     axis.title.x = element_blank(), axis.line.x = element_blank(), \
     axis.text.x = ${text_9a}, axis.title.y = ${text_11}, axis.text.y = ${text_9}, \
     ${margin_1}, ${panel_blank})"
gp_theme_ytxt="theme(${background_blank}, \
     axis.ticks = element_blank(), axis.title = element_blank(), \
     axis.line = element_blank(), axis.text = element_blank(), \
     axis.text.y = ${text_9}, \
     ${margin_0}, ${panel_blank})"
gp_theme_ytick="theme(${background_blank}, ${ticks_0p3}, \
     axis.title.x = element_blank(), axis.line = element_blank(), \
      axis.text.x = element_blank(), axis.ticks.x = element_blank(), \
     axis.title.y = ${text_11}, axis.text.y = ${text_9}, \
     ${margin_0}, ${panel_blank})"
gp_theme_point="theme(${background_blank}, ${ticks_0p3}, \
     axis.title = ${text_11}, axis.text = ${text_9}, \
     ${margin_0p5}, ${panel_blank})"

CP_gp_bar="geom_bar(stat='identity', color='black') + \
   scale_fill_identity() + \
   scale_x_discrete(expand = expansion(add = 0.5)) + \
   scale_y_continuous(limits = c(0, 35), \
    breaks = seq(0, 35, 5), expand = expansion(mult = c(0, 0)))"
CP_gp_bar_y60="geom_bar(stat='identity', color='black') + \
   scale_fill_identity() + \
   scale_x_discrete(expand = expansion(add = 0.5)) + \
   scale_y_continuous(limits = c(0, 60), \
    breaks = seq(0, 60, 10), expand = expansion(mult = c(0, 0)))"
CP_gp_bar_y100="geom_bar(stat='identity', color='black') + \
   scale_fill_identity() + \
   scale_x_discrete(expand = expansion(add = 0.5)) + \
   scale_y_continuous(limits = c(0, 100), \
    breaks = seq(0, 100, 10), expand = expansion(mult = c(0, 0)))"
CP_subtype_fa="d[['subtype']]=factor(d[['subtype']], levels=c('COLME', 'NDBE', 'LGD', 'HGD', 'EAC'))"
CP_vc_fa="d[['variant_classification']]=factor(d[['variant_classification']], levels=c('1_local', '2_uniparental_disomy', '3_chr_arm', \
 '4_terminal', '5_paracentric', '6_pericentric', \
 '7_complex_loss', '8_complex_gain', '9_focal_amp'))"
CP_color_fa="d[['CNV_color']]=factor(d[['CNV_color']], levels=c('#92278f', '#f15a29', '#fbb040', '#0089bc', '#79dbff', '#00aeef'))"
CP_WGD_map="map = NULL;map['WGD_NA'] = 'no_WGD';map['WGD_0'] = 'pre_WGD';map['WGD_1'] = 'post_WGD'"

## Sample-level plots
### stacked barplot for each stage (Matrix: sample_id + WGD + subtype ~ variant_classification)
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 datatable.R - -e "dcast(data=d, sample_id + WGD + subtype ~ variant_classification, \
  value.var = 'N_CNV')" | \
 awk -F "\t" -v OFS="\t" '{printf $1"\t"$2"\t"$3;\
  for(i=3;i++<NF;) {if($i=="NA"){$i=0};printf "\t"$i};printf "\n"}' | \
 datatable.R - -e "d[, lapply(.SD, sum), , by = .(sample_id, subtype), \
   .SDcols = c('1_local', '2_uniparental_disomy', '3_chr_arm', '4_terminal',  '5_paracentric', '6_pericentric', '7_complex_loss', '8_complex_gain', '9_focal_amp')]" | \
 datatable.R - -e "melt(data=d, id.vars=c('sample_id', 'subtype'), \
  variable.name = 'variant_classification', value.name = 'N_CNV')" | \
 datatable.R - -e "d[, .(Mean_Count=mean(N_CNV)), by=.(subtype, variant_classification)]" | \
 sed 's#BE#NDBE#g' | \
 merge_2file.R -a - -b ${cnv_color} -x 2 -y 1 -J | \
 ggplot2.R - -o ${cnv_pattern_plot}.subtype_CNV.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${CP_subtype_fa};${CP_vc_fa};${CP_color_fa};\
   ggplot(data=d, aes(x=subtype, y=Mean_Count, fill=CNV_color)) + \
   geom_bar(stat='identity', color='black') + \
      scale_fill_identity() + \
      scale_x_discrete(expand = expansion(add = 0.5)) + \
      scale_y_continuous(limits = c(0, 40), \
      breaks = seq(0, 40, 5), expand = expansion(mult = c(0, 0))) + \
      ${gp_theme}" &> ${cnv_pattern_plot}.subtype_CNV.bar.stderr.log
### stacked barplot for each sample
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $0,"stroke_col\tstroke_size"}\
  FNR>1&&$6>0{print $0,"white\t0.02";\
   if($4<$9){$2="0_gap";$6=0.5;a[$1_$4]=$0"\tblack\t0.5"}}\
  END{for (i in a) {print a[i]}}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $0,"sample_id2"}\
  FNR>1{s=$1;sub(/.*-/,"",s);print $0,$3"-"s}' | \
 merge_2file.R -a - -b ${cnv_color_wgd} \
  -x 2,4 -y 1,2 -J | \
 sed 's#BE#NDBE#g' | grep -v COLME | \
 ggplot2.R - -o ${cnv_pattern_plot}.sample_CNV.bar.pdf \
  -s 10,6 -b blank --col_name TRUE \
  -m "library(grid);library(gridExtra);\
   ${CP_subtype_fa};\
   d[['sample_WGD']]=factor(d[['sample_WGD']], levels=c(2, 1, 0));\
   col_df=read.delim('${cnv_color_wgd}');\
   d[['CNV_WGD_color']]=factor(d[['CNV_WGD_color']], levels = rev(unique(col_df[['CNV_WGD_color']])));\
   d[['CNV_TP53_color']]=ifelse(d[['sample_TP53i']]==1, 'black', 'white');\
   cnv_gp = ggplot(data=d, aes(x=reorder(sample_id2, -sample_CNV), y = N_CNV,\
     fill=CNV_WGD_color, color=stroke_col, size=stroke_size)) + \
    facet_grid(~subtype + sample_WGD, scales = 'free_x', space = 'free_x') + \
    geom_bar(stat='identity', show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + \
    scale_size_identity() + \
    scale_y_continuous(limits = c(0, 100), \
    breaks = seq(0, 100, 20), expand = expansion(mult = c(0, 0))) + \
    ${gp_theme_xtxt90};\
   cnv_gg = ggplotGrob(cnv_gp);\
   cnv_panels = grep('panel', cnv_gg[['layout']][['name']]);\
   cnv_top = unique(cnv_gg[['layout']][['t']][cnv_panels]);\
   cnv_gg[['heights']][cnv_top] = unit(7, 'cm');\
   cnv_gg[['heights']][9:13] = unit(0, 'cm');\
   p53_gp = ggplot(data=d, aes(x=reorder(sample_id2, -sample_CNV), y = factor('d'),\
     color=CNV_TP53_color)) + geom_point() + \
    facet_grid(~subtype + sample_WGD, scales = 'free_x', space = 'free_x') + \
    scale_y_discrete(label='TP53_null', expand = expansion(mult = c(0, 0))) + \
    scale_fill_identity() + scale_color_identity() + \
    ${gp_theme_ytxt};\
   p53_gg = ggplotGrob(p53_gp);\
   p53_panels = grep('panel', p53_gg[['layout']][['name']]);\
   p53_top = unique(p53_gg[['layout']][['t']][p53_panels]);\
   p53_gg = p53_gg[-(p53_top-1), ];\
   p53_gg[['heights']][9] = unit(0, 'cm');\
   p53_gg[['heights']][1] = unit(1, 'cm');\
   print(cnv_gg[['heights']]);\
   g=gtable_rbind(cnv_gg, p53_gg);\
   grid.draw(g)" &> ${cnv_pattern_plot}.sample_CNV.bar.stderr.log
### stacked barplot to show how number of CNVs associate with TP53 inactivation (Matrix: sample_id + TP53_status ~ variant_classification)
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $0,"TP53_status"}\
  FNR>1{if($8==1){print $0,"Mut"};\
   if($8==0){print $0,"WT"}}' | \
 datatable.R - -e "dcast(data=d, sample_id + WGD + TP53_status ~ variant_classification, \
  value.var = 'N_CNV')" | \
 awk -F "\t" -v OFS="\t" '{printf $1"\t"$2"\t"$3;\
  for(i=3;i++<NF;) {if($i=="NA"){$i=0};printf "\t"$i};printf "\n"}' | \
 datatable.R - -e "d[, lapply(.SD, sum), ,\
  by = .(sample_id, TP53_status), \
   .SDcols = c('1_local', '2_uniparental_disomy', '3_chr_arm', '4_terminal',  '5_paracentric', '6_pericentric', '7_complex_loss', '8_complex_gain', '9_focal_amp')]" | \
 datatable.R - -e "melt(data=d, id.vars=c('sample_id', 'TP53_status'), \
  variable.name = 'variant_classification', value.name = 'N_CNV')" | \
 datatable.R - -e "d[, .(Mean_Count=mean(N_CNV)), by=.(TP53_status, variant_classification)]" | \
 merge_2file.R -a - -b ${cnv_color} -x 2 -y 1 -J | \
 ggplot2.R - -o ${cnv_pattern_plot}.TP53_CNV.bar.pdf \
  -s 2,7 -b blank --col_name TRUE \
  -m "library(grid);library(gridExtra);\
   ${CP_color_fa};\
   d[['TP53_status']]=factor(d[['TP53_status']], levels=c('WT', 'Mut'));\
   ggplot(data=d, aes(x = TP53_status, y = Mean_Count,\
     fill=CNV_color, color='black')) + \
    geom_bar(stat='identity', show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_x_discrete(expand = expansion(add = 0.5)) + \
    scale_y_continuous(limits = c(0, 35), \
    breaks = seq(0, 35, 5), expand = expansion(mult = c(0, 0))) + \
    ${gp_theme}" &> ${cnv_pattern_plot}.TP53_CNV.bar.stderr.log
### stacked barplot to show how number of CNVs associate with TP53 inactivation for Pt_9 and others (Matrix: sample_id + TP53_status ~ variant_classification)
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $0,"TP53_status"}\
  FNR>1{if($8==1){p="Mut"};if($8==0){p="WT"};\
   if($1=="EAC-10_11-HGD2_HGD3"){p="Pt_1-HGD"};\
   if($1~/EAC-M007/){s=$1;sub("EAC-M007","",s);p="Pt_9"s};\
   {print $0,p}}' | \
 datatable.R - -e "dcast(data=d, sample_id + WGD + TP53_status ~ variant_classification, \
  value.var = 'N_CNV')" | \
 awk -F "\t" -v OFS="\t" '{printf $1"\t"$2"\t"$3;\
  for(i=3;i++<NF;) {if($i=="NA"){$i=0};printf "\t"$i};printf "\n"}' | \
 datatable.R - -e "d[, lapply(.SD, sum), by = .(sample_id, TP53_status), \
   .SDcols = c('1_local', '2_uniparental_disomy', '3_chr_arm', '4_terminal',  '5_paracentric', '6_pericentric', '7_complex_loss', '8_complex_gain', '9_focal_amp')]" | \
 datatable.R - -e "melt(data=d, id.vars=c('sample_id', 'TP53_status'), \
  variable.name = 'variant_classification', value.name = 'N_CNV')" | \
 datatable.R - -e "d[, .(Mean_Count=mean(N_CNV)), by=.(TP53_status, variant_classification)]" | \
 merge_2file.R -a - -b ${cnv_color} \
  -x 2 -y 1 -J | \
 ggplot2.R - -o ${cnv_pattern_plot}.TP53_CNV.Pt_9.bar.pdf \
  -s 7,7 -b blank --col_name TRUE \
  -m "library(grid);library(gridExtra);\
   ${CP_color_fa};\
   d[['TP53_status']]=factor(d[['TP53_status']], levels=c('WT', 'Mut', 'Pt_1-HGD', 'Pt_9-BE2_BE3', 'Pt_9-HGD1', 'Pt_9-HGD2', 'Pt_9-IMEAC1', 'Pt_9-EAC1'));\
   ggplot(data=d, aes(x = TP53_status, y = Mean_Count,\
     fill=CNV_color, color='black')) + \
    geom_bar(stat='identity', show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
     scale_x_discrete(expand = expansion(add = 0.5)) + \
     scale_y_continuous(limits = c(0, 50), breaks = seq(0, 50, 5), \
      expand = expansion(mult = c(0, 0))) + \
     ${gp_theme_xtxt45}" &> ${cnv_pattern_plot}.TP53_CNV.Pt_9.bar.stderr.log
### stacked barplot to show how number of CNVs associate with WGD and TP53 inactivation for Pt_9 and others (Matrix: sample_id + TP53_status ~ variant_classification)
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$8==1{print}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $0,"WGD_timing"}\
  FNR>1{if(($4==0)&&($9==0)){print $0,"no_WGD"};\
   if(($4==0)&&($9>0)){print $0,"pre_WGD"};\
   if(($4>0)&&($9>0)){print $0,"post_WGD"}}' | \
 datatable.R - -e "dcast(data=d, sample_id + WGD + subtype + WGD_timing ~ variant_classification, \
  value.var = 'N_CNV')" | \
 awk -F "\t" -v OFS="\t" '{printf $1"\t"$2"\t"$3"\t"$4;\
  for(i=4;i++<NF;) {if($i=="NA"){$i=0};printf "\t"$i};printf "\n"}' | \
 awk -F "\t" -v OFS="\t" '{if($2==2){$2=1};print}' | \
 datatable.R - -e "d[, lapply(.SD, sum), by = .(sample_id, subtype, WGD_timing), \
   .SDcols = c('1_local', '2_uniparental_disomy', '3_chr_arm', '4_terminal',  '5_paracentric', '6_pericentric', '7_complex_loss', '8_complex_gain', '9_focal_amp')]" | \
 datatable.R - -e "melt(data=d, id.vars=c('sample_id', 'subtype', 'WGD_timing'), \
  variable.name = 'variant_classification', value.name = 'N_CNV')" | \
 datatable.R - -e "d[, .(Mean_Count=mean(N_CNV)), by=.(subtype, WGD_timing, variant_classification)]" | \
 sed 's#BE#NDBE#g' | grep -v COLME | \
 merge_2file.R -a - -b ${cnv_color} -x 3 -y 1 -J | \
 ggplot2.R - -o ${cnv_pattern_plot}.TP53_WGD.bar.pdf \
  -s 8.5,7 -b blank --col_name TRUE \
  -m "library(grid);library(gridExtra);\
   d[['subtype']]=factor(d[['subtype']], levels=c('COLME', 'NDBE', 'LGD', 'HGD', 'EAC'));\
   d[['WGD_timing']]=factor(d[['WGD_timing']], levels=c('no_WGD', 'pre_WGD', 'post_WGD'));\
   ${CP_color_fa};\
   cnv_gp = ggplot(data=d, aes(x = subtype, y = Mean_Count,\
     fill=CNV_color, color='black')) + \
    facet_grid(~WGD_timing, scales = 'free_x', space = 'free_x') + \
    geom_bar(stat='identity', show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_x_discrete(expand = expansion(add = 0.5)) + \
    scale_y_continuous(limits = c(0, 35), breaks = seq(0, 35, 5), \
    expand = expansion(mult = c(0, 0))) + \
    ${gp_theme};\
   cnv_gg = ggplotGrob(cnv_gp);\
   grid.draw(cnv_gg)" &> ${cnv_pattern_plot}.TP53_WGD.bar.stderr.log
### stacked barplot to show how number of CNVs associate with WGD (Matrix: sample_id + TP53_status ~ variant_classification)
cat ${CNV_pattern}.CNV_WGD.N_CNV.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  $1=="3_chr_arm"||$1=="4_segmental"{print}' | \
 ggplot2.R - -o ${cnv_pattern_plot}.CNV_WGD.bar.pdf \
  -s 7,7 -b blank --col_name TRUE \
  -m "library(grid);library(gridExtra);\
   d[['variant_classification']]=factor(d[['variant_classification']], levels=c('3_chr_arm', '4_segmental'));\
   d[['WGD_timing']]=factor(d[['WGD_timing']], levels=c('pre_WGD', 'WGD', 'post_WGD'));\
   d['variant_type']=ifelse(d[['variant_type']]=='gain', 'black', 'white'); \
   d[['variant_type']]=factor(d[['variant_type']], levels=c('white', 'black'));\
   cnv_gp = ggplot(data=d, aes(x = WGD_timing, y = N_CNV,\
     fill=variant_type, color='black')) + \
    facet_grid(~variant_classification, scales = 'free_x', space = 'free_x') + \
    geom_bar(stat='identity', show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_x_discrete(expand = expansion(add = 0.5)) + \
    scale_y_continuous(limits = c(0, 300), breaks = seq(0, 300, 100), \
    expand = expansion(mult = c(0, 0))) + \
    ${gp_theme};\
   cnv_gg = ggplotGrob(cnv_gp);\
   grid.draw(cnv_gg)" &> ${cnv_pattern_plot}.CNV_WGD.bar.stderr.log

## Branch-level plots
cat ${CNV_pattern}.branch.tp.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$19==1' | cut -f 1-17 | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 datatable.R - -e "d[, .N, \
  by = .(cnv_id, Branch_ID, pt_id, variant_classification, \
   N_samples, TP53_timing, WGD_timing, tumor_branch)]" | \
 merge_2file.R -a - -b ${cnv_color} -x 4 -y 1 -J | \
 merge_2file.R -a - -b ${CNV_pattern}.N.tsv -x 3 -y 2 | \
 sed '1,1s#N_CNV#branch_CNV#;1,1s#N_bins#branch_SNV#;1,1s#\tN\t#\tN_CNV\t#' | \
 awk -F "\t" -v OFS="\t" '$9!="NA"{print}' | \
 ggplot2.R - -o ${cnv_pattern_plot}.branch.bar.pdf \
  -s 12,6 -b blank --col_name TRUE \
  -m "library(grid);library(gridExtra);\
   ${CP_color_fa};\
   d['TP53_timing_col']=ifelse(d[['TP53_timing']]==1, 'black', 'white'); \
   map_wgd = NULL;map_wgd['WGD_NA'] = 'NA';map_wgd['WGD_0'] = 'white';map_wgd['WGD_1'] = 'black';map_wgd['WGD_2'] = 'gray'; \
   d[['WGD_timing']]=paste0('WGD_', d[['WGD_timing']]);\
   d[['WGD_timing_fill']]=factor(map_wgd[d[['WGD_timing']]]); \
   d[['WGD_timing_col']]=factor(ifelse(d[['WGD_timing']]!='WGD_NA', 'black', 'NA')); \
   \
   map_tumor = NULL;map_tumor['tumor_NA'] = 'NA';map_tumor['tumor_0'] = 'white';map_tumor['tumor_1'] = 'black'; \
   d[['tumor_timing']]=paste0('tumor_', d[['tumor_branch']]);\
   d[['tumor_timing_fill']]=factor(map_tumor[d[['tumor_timing']]]); \
   d[['tumor_timing_col']]=factor(ifelse(d[['tumor_timing']]!='tumor_NA', 'black', 'NA')); \
   \
   d[['acs_col']]=factor(ifelse(d[['N_samples']]>1, 'shared', 'private'), levels=c('shared', 'private')); \
   d[['tumor_branch_col']]=factor(ifelse(is.na(d[['tumor_branch']]), 'white', 'black'), levels=c('black', 'white')); \
   \
   cnv_gp = ggplot(data=d, aes(x=reorder(Branch_ID, -branch_CNV), y = N_CNV, \
     fill=CNV_color)) + \
    facet_grid(~acs_col, scales = 'free_x') + \
    geom_bar(stat='identity', show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_y_continuous(limits = c(0, 60), \
     breaks = seq(0, 60, 20), expand = expansion(mult = c(0, 0))) + \
    ${gp_theme_xtxt90};\
   cnv_gg = ggplotGrob(cnv_gp);\
   cnv_panels = grep('panel', cnv_gg[['layout']][['name']]);\
   cnv_top = unique(cnv_gg[['layout']][['t']][cnv_panels]);\
   cnv_gg[['heights']][cnv_top] = unit(4.2, 'cm');\
   cnv_gg[['heights']][1] = unit(1, 'cm');\
   \
   d2=unique(d[,c('Branch_ID', 'acs_col', 'branch_CNV', 'branch_SNV')]);\
   snv_gp = ggplot(data=d2, aes(x=reorder(Branch_ID, -branch_CNV), y = branch_SNV, \
     fill='gray')) + \
    facet_grid(~acs_col, scales = 'free_x') + \
    geom_col(show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_y_continuous(limits = c(0, 15000), \
     breaks = seq(0, 15000, 5000), expand = expansion(mult = c(0, 0))) + \
    ${gp_theme_ytick};\
   snv_gg = ggplotGrob(snv_gp);\
   snv_panels = grep('panel', snv_gg[['layout']][['name']]);\
   snv_top = unique(snv_gg[['layout']][['t']][snv_panels]);\
   snv_gg = snv_gg[-(snv_top-1), ];\
   snv_gg[['heights']][1] = unit(0.5, 'cm');\
   snv_gg[['heights']][snv_top] = unit(1.8, 'cm');\
   \
   p53_gp = ggplot(data=d, aes(x=reorder(Branch_ID, -branch_CNV), y = factor('d'), \
    color=TP53_timing_col, size=2)) + \
    facet_grid(~acs_col, scales = 'free_x') + \
    geom_point(show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_y_discrete(label='TP53', expand = expansion(mult = c(0, 0))) + \
    ${gp_theme_ytxt};\
   p53_gg = ggplotGrob(p53_gp);\
   p53_panels = grep('panel', p53_gg[['layout']][['name']]);\
   p53_top = unique(p53_gg[['layout']][['t']][p53_panels]);\
   p53_gg = p53_gg[-(p53_top-1), ];\
   p53_gg[['heights']][1] = unit(-2, 'cm');\
   \
   wgd_gp = ggplot(data=d, aes(x=reorder(Branch_ID, -branch_CNV), y = factor('d'), \
    fill=WGD_timing_fill, color=WGD_timing_col, size=2)) + \
    facet_grid(~acs_col, scales = 'free_x') + \
    geom_point(shape = 21, show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_y_discrete(label='WGD', expand = expansion(mult = c(0, 0))) + \
    ${gp_theme_ytxt};\
   wgd_gg = ggplotGrob(wgd_gp);\
   wgd_panels = grep('panel', wgd_gg[['layout']][['name']]);\
   wgd_top = unique(wgd_gg[['layout']][['t']][wgd_panels]);\
   wgd_gg = wgd_gg[-(wgd_top-1), ];\
   wgd_gg[['heights']][1] = unit(-2, 'cm');\
   \
   tumor_gp = ggplot(data=d, aes(x=reorder(Branch_ID, -branch_CNV), y = factor('d'), \
    fill=tumor_timing_fill, color=tumor_timing_col, size=2)) + \
    facet_grid(~acs_col, scales = 'free_x') + \
    geom_point(shape = 21, show.legend = FALSE) + \
    scale_fill_identity() + scale_color_identity() + scale_size_identity() + \
    scale_y_discrete(label='Tumor', expand = expansion(mult = c(0, 0))) + \
    ${gp_theme_ytxt};\
   tumor_gg = ggplotGrob(tumor_gp);\
   tumor_panels = grep('panel', tumor_gg[['layout']][['name']]);\
   tumor_top = unique(tumor_gg[['layout']][['t']][tumor_panels]);\
   tumor_gg = tumor_gg[-(tumor_top-1), ];\
   tumor_gg[['heights']][1] = unit(-2, 'cm');\
  \
   g=gtable_rbind(cnv_gg, snv_gg, p53_gg, wgd_gg, tumor_gg);\
   grid.draw(g)" &> ${cnv_pattern_plot}.branch.bar.stderr.log

## cohort-level
gp_theme_ncn="theme(plot.background = element_blank(), \
     axis.ticks.length = unit(0.3, 'cm'), \
     axis.title.x = element_blank(), \
     axis.text.x = element_text(size = 9, colour = 'black'), \
     axis.title.y = element_text(size = 11, colour = 'black'), \
     axis.text.y = element_text(size = 9, colour = 'black'), \
     panel.grid.major = element_blank(), panel.grid.minor = element_blank(), \
     panel.background = element_blank())"
gp_bar_ncn="geom_bar(stat='identity', color='black', fill=NA, width=0.5) + \
     scale_x_continuous(limits = c(-0.25, 10.25), breaks=seq(0, 10, 1), expand = expansion(mult = c(0, 0))) + \
     scale_y_continuous(limits = c(0, 1), breaks=seq(0, 1, 0.1), \
      expand = expansion(mult = c(0, 0)))"
weighted_ncn="cn_max=max(d[, 'CN']); cn_min=min(d[, 'CN']);\
      d=table(cut(d[, 'CN'],seq(floor(cn_min)-0.25, ceiling(cn_max)-0.25,0.5)));\
      d=data.table(d[d!=0]);colnames(d)=c('bin', 'N');\
      d[, bin:=as.character(bin)];d[, bin:=gsub('^\\\\D','',bin)];d[, bin:=gsub('\\\\D$','',bin)];\
      d[, c('bin_L', 'bin_R') := tstrsplit(bin, ',', fixed=TRUE)];\
      d[, CN := (as.numeric(bin_L) + as.numeric(bin_R))/2];\
      d[, N_CN := N*CN];sum_ncn=sum(d[, 'N_CN']);d[, N_CN := N_CN/sum_ncn];\
      C10=sum(d[CN>=10, 'N_CN']);\
      d=d[CN>=0];d=d[CN<=10];d[CN==10, 'N_CN']=C10;\
      d=data.frame(d[, .(CN, N_CN)])"
unweighted_ncn="cn_max=max(d[, 'CN']); cn_min=min(d[, 'CN']);\
      d=table(cut(d[, 'CN'],seq(floor(cn_min)-0.25, ceiling(cn_max)-0.25,0.5)));\
      d=data.table(d[d!=0]);colnames(d)=c('bin', 'N');\
      d[, bin:=as.character(bin)];d[, bin:=gsub('^\\\\D','',bin)];d[, bin:=gsub('\\\\D$','',bin)];\
      d[, c('bin_L', 'bin_R') := tstrsplit(bin, ',', fixed=TRUE)];\
      d[, CN := (as.numeric(bin_L) + as.numeric(bin_R))/2];\
      d[, N_CN := N];sum_ncn=sum(d[, 'N_CN']);d[, N_CN := N_CN/sum_ncn];\
      C10=sum(d[CN>=10, 'N_CN']);\
      d=d[CN>=0];d=d[CN<=10];d[CN==10, 'N_CN']=C10;\
      d=data.frame(d[, .(CN, N_CN)])"
### Distribution of copy number states (weighted) in samples with intact p53
cat ${CNV_pattern}.sample_TP53.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$2==0){print $1}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53WT.CN_states.weighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${weighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &
### Distribution of copy number states (weighted) in samples with inactive p53
cat ${CNV_pattern}.sample_TP53.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$2==1){print $1}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53Mut.CN_states.weighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${weighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &
### Distribution of copy number states (weighted) in samples with inactive p53 and w/o WGD
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$8==1&&$9==0){print $1}' | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53Mut_WGD0.CN_states.weighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${weighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &
### Distribution of copy number states (weighted) in samples with inactive p53 and WGD
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$8==1&&$9>0){print $1}' | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53Mut_WGD1.CN_states.weighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${weighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &

### Distribution of copy number states (unweighted) in samples with intact p53
cat ${CNV_pattern}.sample_TP53.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$2==0){print $1}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53WT.CN_states.unweighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${unweighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &
### Distribution of copy number states (unweighted) in samples with inactive p53
cat ${CNV_pattern}.sample_TP53.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$2==1){print $1}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53Mut.CN_states.unweighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${unweighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &
### Distribution of copy number states (unweighted) in samples with inactive p53 and w/o WGD
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$8==1&&$9==0){print $1}' | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53Mut_WGD0.CN_states.unweighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${unweighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &
### Distribution of copy number states (unweighted) in samples with inactive p53 and WGD
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "SAMPLE"}\
  ($1!~/^EAC-M007/&&$1!="EAC-10_11-HGD2_HGD3"&&$8==1&&$9>0){print $1}' | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 fgrep -wf - ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.absolute_CN.100kb.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$2~/^[0-9]/' | cut -f 2-6 | \
 datatable.R - -e "melt(data=d, id.vars=c('CONTIG', 'START', 'END'), \
  variable.name = 'PH', value.name = 'CN')" | \
 ggplot2.R - -o ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.TP53Mut_WGD1.CN_states.unweighted.bar.pdf \
  -s 5,7 -b blank --col_name TRUE \
  -m "${unweighted_ncn};\
      ggplot(data=d, aes(x=CN, y=N_CN))+ \
       ${gp_bar_ncn} + ${gp_theme_ncn}" &>> ${ESAD75_SCNV25}/allelic_copy_number_100kb/EAC_WGS.CN_states.bar.stderr.log &

## statistic
cnv_pattern_plot=${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.plot/WGS_EAC.CNV_pattern
echo -e "Figures\tp-value" > ${cnv_pattern_plot}.branch.p-value.tsv
### Figure 4A,middle
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 datatable.R - -e "d[, lapply(.SD, sum), ,\
  by = .(sample_id, sample_TP53i), .SDcols = c('N_CNV')]" | \
 datatable.R - -e "p=wilcox.test(N_CNV~sample_TP53i,d,exact=F)[3];\
  d=data.table(Figures='Figure 4A,middle',p)" | \
 sed '1,1d' >> ${cnv_pattern_plot}.branch.p-value.tsv
### Figure S4C
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $0,"TP53_status"}\
  FNR>1{if($8==1){p="Mut"};if($8==0){p="WT"};\
   if($1=="EAC-10_11-HGD2_HGD3"){p="Pt_1-HGD"};\
   if($1~/EAC-M007/){s=$1;sub("EAC-M007","",s);p="Pt_9"s};\
   {print $0,p}}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print};\
  $10=="WT"||$10=="Mut"{print}' | \
 datatable.R - -e "d[, lapply(.SD, sum), ,\
  by = .(sample_id, TP53_status), .SDcols = c('N_CNV')]" | \
 datatable.R - -e "p=wilcox.test(N_CNV~TP53_status,d,exact=F)[3];\
  d=data.table(Figures='Figure S4C',p)" | \
 sed '1,1d' >> ${cnv_pattern_plot}.branch.p-value.tsv
### Figure 4A,right
cat ${ESAD75_SCNV25}/CNV_pattern/WGS_EAC.CNV_pattern.sample.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1&&$9>0{if($4>1){$4=1};print}' | \
 datatable.R - -e "d[, lapply(.SD, sum), ,\
  by = .(sample_id, subtype, WGD), .SDcols = c('N_CNV')]" | \
 datatable.R - -e "p1=wilcox.test(N_CNV~WGD,d[subtype=='HGD'],exact=F)[3];\
  p2=wilcox.test(N_CNV~WGD,d[subtype=='EAC'],exact=F)[3];\
  p3=wilcox.test(N_CNV~WGD,d,exact=F)[3];\
  d1=data.table(Figures='Figure 4A,right (HGD)',p=p1);\
  d2=data.table(Figures='Figure 4A,right (EAC)',p=p2);\
  d3=data.table(Figures='Figure 4A,right (HGD+EAC)',p=p3);\
  d=rbind(d1,d2,d3)" | \
 sed '1,1d' >> ${cnv_pattern_plot}.branch.p-value.tsv
### Figure 4B
cat ${CNV_pattern}.branch.tp.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1||$19==1' | cut -f 1-17 | \
 awk -F "\t" -v OFS="\t" '!a[$0]++{print}' | \
 datatable.R - -e "d[, .N, \
  by = .(Branch_ID, N_samples, WGD_timing)]" | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1{if(($3+0)>0){$3=1}else{$3=0};print}' | \
 datatable.R - -e "p1=wilcox.test(N~WGD_timing,d[N_samples==1],exact=F)[3];\
  p2=wilcox.test(N~WGD_timing,d[N_samples>1],exact=F)[3];\
  p3=wilcox.test(N~WGD_timing,d,exact=F)[3];\
  d1=data.table(Figures='Figure 4B (private)',p=p1);\
  d2=data.table(Figures='Figure 4B (ancestral)',p=p2);\
  d3=data.table(Figures='Figure 4B (private+ancestral)',p=p3);\
  d=rbind(d1,d2,d3)" | \
 sed '1,1d' >> ${cnv_pattern_plot}.branch.p-value.tsv
### Figure 4C
cat ${CNV_pattern}.CNV_WGD.N_CNV.tsv | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  $1=="3_chr_arm"||$1=="4_segmental"{print}' | \
 datatable.R - -e "dcast(data=d, variant_classification + WGD_timing ~ variant_type, value.var = 'N_CNV')" | \
 datatable.R - -e "o=data.table();\
  for (i in unique(d[,variant_classification])) {\
   m = d[variant_classification==i];\
   m1 = as.matrix(m[WGD_timing %in% c('pre_WGD', 'WGD'), .(gain,loss)]);\
   m2 = as.matrix(m[WGD_timing %in% c('pre_WGD', 'post_WGD'), .(gain,loss)]);\
   p1 = fisher.test(m1)[1];\
   p2 = fisher.test(m2)[1];\
   op = data.table(category=i, WGD=p1, post_WGD=p2);\
   o = rbind(o, op)};\
  d=o" > ${cnv_pattern_plot}.CNV_WGD.p-value.tsv 


# Metrics
use UGER
ish -l h_vmem=1G -binding linear:15 -pe smp 15

use R-3.4
export R_LIBS="~/lib"

ESAD75_FCMeta=${ESAD75}/Firecloud_metadata
ESAD75_FHMeta=${ESAD75}/Firehose_metadata

BN10_HC=${ESAD75}/HaplotypeCaller
BN10_C5=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2
ESAD75_SCNV25=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2_25k

## sequencing metrics
### file headers
BN10_bam=${ESAD75_FCMeta}/sample__output_id__wgs_bam.Feb182019.tsv
echo -e "output_id\tduplication_rate\tlibrary_complexity" > ${ESAD75_FCMeta}/WGS_EAC.duplication_metrics.tsv
echo -e "output_id\tfragment_size\tread_pairs" > ${ESAD75_FCMeta}/WGS_EAC.insert_size.tsv
### extract metrics for each sample
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
   cat ${ESAD75}/Firecloud_metadata/sample__output_id.Feb182019.tsv | \
    awk -F "\t" -v r="${participant_id}" '$3==r{print}' | while read so_t;do
       c=(${so_t});output_id=${c[3]}
       s=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v o="${output_id}" '$4==o{print $2}'`
       bam=`cat ${BN10_bam} | sed 's#\/v[0-9]*\/#/current/#g' | awk -F "\t" -v o="${output_id}" '$4==o{sub(".bam","",$5);print $5}'`
       cat ${bam}.duplicate_metrics | grep -A 1 ^LIBRARY | head -2 | transpose -f 500 -t | \
        awk -v o="${output_id}" 'BEGIN{printf o}\
         $1=="PERCENT_DUPLICATION"||$1=="ESTIMATED_LIBRARY_SIZE"{printf "\t"$2}\
         END{printf "\n"}' >> ${ESAD75_FCMeta}/WGS_EAC.duplication_metrics.tsv
       cat ${bam}.insert_size_metrics | grep -A 1 ^MEDIAN_INSERT_SIZE | head -2 | transpose -f 500 -t | \
        awk -v o="${output_id}" 'BEGIN{printf o}\
         $1=="MEDIAN_INSERT_SIZE"||$1=="READ_PAIRS"{printf "\t"$2}\
         END{printf "\n"}' >> ${ESAD75_FCMeta}/WGS_EAC.insert_size.tsv
    done
done
### merge
cat ${ESAD75_FCMeta}/sample__Patient_ID.tsv | cut -f 1,2,3,5 | \
 merge_2file.R -a - -b ${ESAD75_FCMeta}/WGS_EAC.duplication_metrics.tsv | \
 merge_2file.R -a - -b ${ESAD75_FCMeta}/WGS_EAC.insert_size.tsv > ${ESAD75_FCMeta}/WGS_EAC.seq_metrics.tsv

## allelic depth
echo -e "output_id\thets_per_individual\thets_with_coverage\tref_cov\talt_cov\tref_cov_std\talt_cov_std" > ${ESAD75_FCMeta}/WGS_EAC.allelic_metrics.tsv
cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
 awk -F "\t" 'FNR>1&&!a[$2]++{print $2}' | while read participant_id;do
    cat ${ESAD75_FCMeta}/sample_pair.July212018.FC.tsv | \
     awk -F "\t" -v r="${participant_id}" '$2==r{print}' | while read so_t;do
        ((p=p%14)); ((p++==0)) && wait
        c=(${so_t});t_oid=${c[4]};n_oid=${c[5]}
        t_sid=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v o="${t_oid}" '$4==o{print $2}'`
        n_sid=`cat ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv | awk -F "\t" -v o="${n_oid}" '$4==o{print $2}' | sed 's#(#_#g;s#)#_#g'`
        hets=${BN10_HC}/het_vcf/${participant_id}/${participant_id}
        nh=`zcat ${hets}.het_filtered.vcf.gz  | grep -v ^'#' |wc -l`
        # normal samples
        [[ ! -e ${ESAD75_FCMeta}/log/${n_oid}.allelic_metrics.log ]] && \
        allelic_counts_normal=${BN10_C5}/allelic_counts_normal/${n_sid} && \
        zcat ${hets}.het_filtered.vcf.gz | grep -v ^"#" | \
          awk -F "\t" -v OFS="\t" 'FNR==1{print "CONTIG"}FNR>1{print $1,$2,$4,$5}' | \
          fgrep -f - <(cat ${allelic_counts_normal}.allelicCounts.tsv | \
           awk -F "\t" -v OFS="\t" '$1!~/^@/{print $1,$2,$5,$6,$3,$4}') | \
          datatable.R - -e "o_dt = data.table(id='${n_oid}',nh='${nh}',nhc=NA,m0=NA,m1=NA,s0=NA,s1=NA);\
           o_dt[, nhc := nrow(d[(REF_COUNT>0)|ALT_COUNT>0, ])];\
           o_dt[, m0 := mean(d[REF_COUNT<100, REF_COUNT])]; o_dt[, s0 := sd(d[REF_COUNT<100, REF_COUNT])];\
           o_dt[, m1 := mean(d[ALT_COUNT<100, ALT_COUNT])]; o_dt[, s1 := sd(d[ALT_COUNT<100, ALT_COUNT])];\
           setcolorder(o_dt, c('id', 'nh', 'nhc', 'm0', 'm1', 's0', 's1'));\
           d=o_dt" | tail -n +2 >> ${ESAD75_FCMeta}/WGS_EAC.allelic_metrics.tsv 2> ${ESAD75_FCMeta}/log/${n_oid}.allelic_metrics.log &
        # tumor samples
        allelic_counts_tumor=${BN10_C5}/allelic_counts_tumor/${t_sid} && \
        zcat ${hets}.het_filtered.vcf.gz | grep -v ^"#" | \
         awk -F "\t" -v OFS="\t" 'FNR==1{print "CONTIG"}FNR>1{print $1,$2,$4,$5}' | \
          fgrep -f - <(cat ${allelic_counts_tumor}.allelicCounts.tsv | \
           awk -F "\t" -v OFS="\t" '$1!~/^@/{print $1,$2,$5,$6,$3,$4}') | \
         datatable.R - -e "o_dt = data.table(id='${t_oid}',nh='${nh}',nhc=NA,m0=NA,m1=NA,s0=NA,s1=NA);\
          o_dt[, nhc := nrow(d[(REF_COUNT>0)|ALT_COUNT>0, ])];\
          o_dt[, m0 := mean(d[REF_COUNT<100, REF_COUNT])]; o_dt[, s0 := sd(d[REF_COUNT<100, REF_COUNT])];\
          o_dt[, m1 := mean(d[ALT_COUNT<100, ALT_COUNT])]; o_dt[, s1 := sd(d[ALT_COUNT<100, ALT_COUNT])];\
          setcolorder(o_dt, c('id', 'nh', 'nhc', 'm0', 'm1', 's0', 's1'));\
          d=o_dt" | tail -n +2 >> ${ESAD75_FCMeta}/WGS_EAC.allelic_metrics.tsv &
        wait $!
    done
done
rm -rf ${ESAD75_FCMeta}/log/*.allelic_metrics.log

## purity
cat ${ESAD75_ABSOLUTE}__Phylogic/absolute_fc_pp_calls_tab_txt__BN10_all/BN10_all.PP-calls_tab.txt | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print "output_id\tinferred_purity\tinferred_ploidy\tWGD"}\
  FNR>1{if($1=="EAC-M016-IMEAC2"){$6=0};if($6>0){$6="Y"}else{$6="N"};print $1,$4,$5,$6}' > ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.tsv
# manually reviewed: ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv

## total depth
cat /seq/picard_aggregation/RP-1296/WGS/10_11_Norm/v2/10_11_Norm.wgs_metrics | \
 grep ^GENOME_TERRITORY -A 1 | head -1 | sed 's#^#sample_id\texternal_id_wgs\t#' > ${ESAD75_FHMeta}/WGS_EAC.wgs_metrics.tsv
cat ${ESAD75_FHMeta}/Samples_1-2.FH.tsv | \
 awk -F "\t" 'FNR>1{print $1,$5,$10}' | sed 's#\/v[0-9]*\/#/current/#g' | while read l;do
    c=(${l});f=${c[1]/\.bam/}.wgs_metrics
    cat ${f} | grep ^GENOME_TERRITORY -A 1 | tail -1 | \
     sed "s#^#${c[0]}\t${c[2]}\t#" >> ${ESAD75_FHMeta}/WGS_EAC.wgs_metrics.tsv
done

## summary
cat ${ESAD75_FHMeta}/WGS_EAC.wgs_metrics.tsv | cut -f 1,4 | \
 merge_2file.R -a ${ESAD75_FCMeta}/sample__output_id.Feb182019.tsv -b - -J | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print $4,"mean_depth"}FNR>1{print $4,$5}' | \
 merge_2file.R -a - -b ${ESAD75_FCMeta}/WGS_EAC.absolute_metrics.v2.tsv | \
 merge_2file.R -a - -b ${ESAD75_FCMeta}/WGS_EAC.allelic_metrics.tsv | \
 merge_2file.R -a - -b ${ESAD75_FCMeta}/WGS_EAC.seq_metrics.tsv | \
 merge_2file.R -a ${ESAD75_FCMeta}/WGS_EAC.output_id.ordered.tsv -b - -J | \
 awk -F "\t" -v OFS="\t" '{print $12,$13,$14,$2,$3,$4,$5,$6,$7,$18,$16,$15,$17,"",$8,$9,$10,$11}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{$14="read_length";print}FNR>1{$14=151;print}' | \
 awk -F "\t" -v OFS="\t" 'FNR==1{print}\
  FNR>1{sub($1"-","",$2);if(a[$1]++){$1=""};print}' > ${ESAD75_FCMeta}/Table.S1.Sample.Summary.tsv


# dbGAP
use UGER
ish -l h_vmem=1G -binding linear:4 -pe smp 4

use R-3.4
export R_LIBS="~/lib"


ESAD75_FCMeta=${ESAD75}/Firecloud_metadata
ESAD75_SCNV25=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2_25k
BN10_C5=${ESAD75_SCNV5}

### md5
echo -e "output_id\tfilename\tMD5_checksum" > ${ESAD75_FCMeta}/sample__bam_md5.tsv
cat ${ESAD75_FCMeta}/sample__output_id__wgs_bam.Feb182019.tsv | \
 sed 's#\/v[0-9]*\/#/current/#g' | awk 'FNR>1' | while read l;do
    c=(${l});f=${c[4]}.md5;n=${c[4]/*\//}
    m=`cat ${f}`
    echo -e "${c[3]}\t${n}\t${m}" >> ${ESAD75_FCMeta}/sample__bam_md5.tsv
done
### dbGAP metadata
cat ${ESAD75_FCMeta}/sample__Patient_ID.tsv | \
 merge_2file.R -a - -b ${ESAD75_FCMeta}/sample__bam_md5.tsv | \
 cut -f 3,6,7 > ${ESAD75_FCMeta}/sample__bam_md5.dbGAP.tsv

## upload
ESAD75_FCMeta=${ESAD75}/Firecloud_metadata
ESAD75_SCNV25=${ESAD75}/CNVSomaticPairWorkflow_v4p0p1p2_25k
### bam
cat ${ESAD75_FCMeta}/sample__output_id__wgs_bam.Feb182019.tsv | \
 sed 's#\/v[0-9]*\/#/current/#g' | awk 'FNR>1' | while read l;do
    c=(${l});f=${c[4]}
    ascp -i .ssh/private.openssh -Q -l 1000m -k 1 ${f} asp-sra@gap-submit.ncbi.nlm.nih.gov:protected
done
ascp -i .ssh/private.openssh -Q -l 1000m -k 1 /broad/hptmp/chengz/Data/EAC/EB-SI-All.primary-deduped.bam asp-sra@gap-submit.ncbi.nlm.nih.gov:protected


